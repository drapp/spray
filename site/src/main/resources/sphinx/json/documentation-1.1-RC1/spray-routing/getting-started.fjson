{"body": "<div class=\"section\" id=\"getting-started\">\n<h1>Getting Started</h1>\n<p>Check out the <a class=\"reference internal\" href=\"../../../introduction/getting-started/#getting-started\"><em>Introduction / Getting Started</em></a> chapter for information about the template\nproject you can use to quickly bootstrap your own <em>spray-routing</em> application.</p>\n<div class=\"section\" id=\"simpleroutingapp\">\n<span id=\"id1\"></span><h2>SimpleRoutingApp</h2>\n<p><em>spray-routing</em> also comes with the <tt class=\"docutils literal\"><span class=\"pre\">SimpleRoutingApp</span></tt> trait, which you can use as a basis for your first\n<em>spray</em> endeavours. It reduces the boilerplate to a minimum and allows you to focus entirely on your route structure.</p>\n<p>Just use this minimal example application as a starting point:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.routing.SimpleRoutingApp</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"k\">with</span> <span class=\"nc\">SimpleRoutingApp</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">(</span><span class=\"s\">&quot;my-system&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"n\">startServer</span><span class=\"o\">(</span><span class=\"n\">interface</span> <span class=\"k\">=</span> <span class=\"s\">&quot;localhost&quot;</span><span class=\"o\">,</span> <span class=\"n\">port</span> <span class=\"k\">=</span> <span class=\"mi\">8080</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">get</span> <span class=\"o\">{</span>\n        <span class=\"n\">complete</span> <span class=\"o\">{</span>\n          <span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"nc\">Say</span> <span class=\"n\">hello</span> <span class=\"n\">to</span> <span class=\"n\">spray</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>This very concise way of bootstrapping a <em>spray-routing</em> application works nicely as long as you don&#8217;t have any special\nrequirements with regard to the actor which is running your route structure. Once you need more control over it, e.g.\nbecause you want to be able to use it as the receiver (or sender) of custom messages, you&#8217;ll have to &#8220;fall back&#8221; to\ncreating your service actor &#8220;manually&#8221;. The <a class=\"reference internal\" href=\"../examples/#complete-examples\"><em>Complete Examples</em></a> demonstrate how to do that.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Getting Started", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/getting-started", "next": {"link": "../key-concepts/", "title": "Key Concepts"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/key-concepts/index", "Key Concepts", "N", "next"], ["documentation/spray-routing/configuration", "Configuration", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-routing"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Getting Started</a><ul>\n<li><a class=\"reference internal\" href=\"#simpleroutingapp\">SimpleRoutingApp</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../configuration/", "title": "Configuration"}, "metatags": ""}