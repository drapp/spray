{"body": "<div class=\"section\" id=\"spray-routing\">\n<span id=\"id1\"></span><h1>spray-routing</h1>\n<p>The <em>spray-routing</em> module provides a high-level, very flexible routing DSL for elegantly defining RESTful web services.\nNormally you would use it either on top of a <a class=\"reference internal\" href=\"../spray-can/#spray-can\"><em>spray-can</em></a> <a class=\"reference internal\" href=\"../spray-can/http-server/#http-server\"><em>HTTP Server</em></a> or inside of a servlet container\ntogether with <a class=\"reference internal\" href=\"../spray-servlet/#spray-servlet\"><em>spray-servlet</em></a>.</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"dependencies/\">Dependencies</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"installation/\">Installation</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"configuration/\">Configuration</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"getting-started/\">Getting Started</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"key-concepts/\">Key Concepts</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"advanced-topics/\">Advanced Topics</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"predefined-directives-alphabetically/\">Predefined Directives (alphabetically)</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"predefined-directives-by-trait/\">Predefined Directives (by trait)</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"examples/\">Complete Examples</a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"minimal-example\">\n<h2>Minimal Example</h2>\n<p>This is a complete, very basic <em>spray-routing</em> application:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.routing.SimpleRoutingApp</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"k\">with</span> <span class=\"nc\">SimpleRoutingApp</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">(</span><span class=\"s\">&quot;my-system&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"n\">startServer</span><span class=\"o\">(</span><span class=\"n\">interface</span> <span class=\"k\">=</span> <span class=\"s\">&quot;localhost&quot;</span><span class=\"o\">,</span> <span class=\"n\">port</span> <span class=\"k\">=</span> <span class=\"mi\">8080</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;hello&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">get</span> <span class=\"o\">{</span>\n        <span class=\"n\">complete</span> <span class=\"o\">{</span>\n          <span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"nc\">Say</span> <span class=\"n\">hello</span> <span class=\"n\">to</span> <span class=\"n\">spray</span><span class=\"o\">&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>It starts a <em>spray-can</em> <a class=\"reference internal\" href=\"../spray-can/http-server/#http-server\"><em>HTTP Server</em></a> on localhost and replies to GET requests to <tt class=\"docutils literal\"><span class=\"pre\">/hello</span></tt> with a simple response.</p>\n</div>\n<div class=\"section\" id=\"longer-example\">\n<span id=\"id2\"></span><h2>Longer Example</h2>\n<p>The following is a <em>spray-routing</em> route definition that tries to show off a few features. The resulting service does\nnot really do anything useful but its definition should give you a feel for what an actual API definition with\n<em>spray-routing</em> will look like:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">scala.concurrent.duration.Duration</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.routing.HttpService</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.routing.authentication.BasicAuth</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.routing.directives.CachingDirectives._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.httpx.encoding._</span>\n\n<span class=\"k\">trait</span> <span class=\"nc\">LongerService</span> <span class=\"k\">extends</span> <span class=\"nc\">HttpService</span> <span class=\"k\">with</span> <span class=\"nc\">MyApp</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">simpleCache</span> <span class=\"k\">=</span> <span class=\"n\">routeCache</span><span class=\"o\">(</span><span class=\"n\">maxCapacity</span> <span class=\"k\">=</span> <span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">timeToIdle</span> <span class=\"k\">=</span> <span class=\"nc\">Duration</span><span class=\"o\">(</span><span class=\"s\">&quot;30 min&quot;</span><span class=\"o\">))</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;orders&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">authenticate</span><span class=\"o\">(</span><span class=\"nc\">BasicAuth</span><span class=\"o\">(</span><span class=\"n\">realm</span> <span class=\"k\">=</span> <span class=\"s\">&quot;admin area&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span> <span class=\"n\">user</span> <span class=\"k\">=&gt;</span>\n        <span class=\"n\">get</span> <span class=\"o\">{</span>\n          <span class=\"n\">cache</span><span class=\"o\">(</span><span class=\"n\">simpleCache</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">encodeResponse</span><span class=\"o\">(</span><span class=\"nc\">Deflate</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n              <span class=\"n\">complete</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// marshal custom object with in-scope marshaller</span>\n                <span class=\"n\">getOrdersFromDB</span>\n              <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n          <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"o\">~</span>\n        <span class=\"n\">post</span> <span class=\"o\">{</span>\n          <span class=\"c1\">// decompresses the request with Gzip or Deflate when required</span>\n          <span class=\"n\">decompressRequest</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// unmarshal with in-scope unmarshaller</span>\n            <span class=\"n\">entity</span><span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Order</span><span class=\"o\">])</span> <span class=\"o\">{</span> <span class=\"n\">order</span> <span class=\"k\">=&gt;</span>\n              <span class=\"c1\">// transfer to newly spawned actor</span>\n              <span class=\"n\">detach</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n                <span class=\"n\">complete</span> <span class=\"o\">{</span>\n                  <span class=\"c1\">// ... write order to DB</span>\n                  <span class=\"s\">&quot;Order received&quot;</span>\n                <span class=\"o\">}</span>\n              <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n          <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"c1\">// extract URI path element as Int</span>\n    <span class=\"n\">pathPrefix</span><span class=\"o\">(</span><span class=\"s\">&quot;order&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">IntNumber</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">orderId</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// method tunneling via query param</span>\n        <span class=\"o\">(</span><span class=\"n\">put</span> <span class=\"o\">|</span> <span class=\"n\">parameter</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;method</span> <span class=\"o\">!</span> <span class=\"s\">&quot;put&quot;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n          <span class=\"c1\">// form extraction from multipart or www-url-encoded forms</span>\n          <span class=\"n\">formFields</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;email</span><span class=\"o\">,</span> <span class=\"-Symbol\">&#39;total</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Money</span><span class=\"o\">]).</span><span class=\"n\">as</span><span class=\"o\">(</span><span class=\"nc\">Order</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">order</span> <span class=\"k\">=&gt;</span>\n            <span class=\"n\">complete</span> <span class=\"o\">{</span>\n              <span class=\"c1\">// complete with serialized Future result</span>\n              <span class=\"o\">(</span><span class=\"n\">myDbActor</span> <span class=\"o\">?</span> <span class=\"nc\">Update</span><span class=\"o\">(</span><span class=\"n\">order</span><span class=\"o\">)).</span><span class=\"n\">mapTo</span><span class=\"o\">[</span><span class=\"kt\">TransactionResult</span><span class=\"o\">]</span>\n            <span class=\"o\">}</span>\n          <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"o\">~</span>\n        <span class=\"n\">get</span> <span class=\"o\">{</span>\n          <span class=\"c1\">// JSONP support</span>\n          <span class=\"n\">jsonpWithParameter</span><span class=\"o\">(</span><span class=\"s\">&quot;callback&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// use in-scope marshaller to create completer function</span>\n            <span class=\"n\">produce</span><span class=\"o\">(</span><span class=\"n\">instanceOf</span><span class=\"o\">[</span><span class=\"kt\">Order</span><span class=\"o\">])</span> <span class=\"o\">{</span> <span class=\"n\">complete</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span>\n              <span class=\"n\">processOrderRequest</span><span class=\"o\">(</span><span class=\"n\">orderId</span><span class=\"o\">,</span> <span class=\"n\">complete</span><span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n          <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span> <span class=\"o\">~</span>\n      <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;items&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">get</span> <span class=\"o\">{</span>\n          <span class=\"c1\">// parameters to case class extraction</span>\n          <span class=\"n\">parameters</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;size</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"-Symbol\">&#39;color</span> <span class=\"o\">?,</span> <span class=\"-Symbol\">&#39;dangerous</span> <span class=\"o\">?</span> <span class=\"s\">&quot;no&quot;</span><span class=\"o\">)</span>\n                  <span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">(</span><span class=\"nc\">OrderItem</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">orderItem</span> <span class=\"k\">=&gt;</span>\n            <span class=\"c1\">// ... route using case class instance created from</span>\n            <span class=\"c1\">// required and optional query parameters</span>\n          <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;documentation&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// cache responses to GET requests</span>\n      <span class=\"n\">cache</span><span class=\"o\">(</span><span class=\"n\">simpleCache</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// optionally compresses the response with Gzip or Deflate</span>\n        <span class=\"c1\">// if the client accepts compressed responses</span>\n        <span class=\"n\">compressResponse</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n          <span class=\"c1\">// serve up static content from a JAR resource</span>\n          <span class=\"n\">getFromResourceDirectory</span><span class=\"o\">(</span><span class=\"s\">&quot;docs&quot;</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;oldApi&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">Rest</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">path</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">redirect</span><span class=\"o\">(</span><span class=\"s\">&quot;http://oldapi.example.com/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"nc\">StatusCodes</span><span class=\"o\">.</span><span class=\"nc\">MovedPermanently</span><span class=\"o\">)</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "spray-routing", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/index", "next": {"link": "dependencies/", "title": "Dependencies"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/dependencies", "Dependencies", "N", "next"], ["documentation/spray-io/index", "spray-io", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "Documentation"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">spray-routing</a><ul>\n<li><a class=\"reference internal\" href=\"#minimal-example\">Minimal Example</a></li>\n<li><a class=\"reference internal\" href=\"#longer-example\">Longer Example</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../spray-io/", "title": "spray-io"}, "metatags": ""}