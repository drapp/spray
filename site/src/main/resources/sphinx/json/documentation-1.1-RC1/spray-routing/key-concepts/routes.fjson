{"body": "<div class=\"section\" id=\"routes\">\n<span id=\"id1\"></span><h1>Routes</h1>\n<p>&#8220;Routes&#8221; are a central concept in <em>spray-routing</em> since all structures you build with the routing DSL are subtypes of\ntype <tt class=\"docutils literal\"><span class=\"pre\">Route</span></tt>. In <em>spray-routing</em> a route is defined like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">type</span> <span class=\"kt\">Route</span> <span class=\"o\">=</span> <span class=\"nc\">RequestContext</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Unit</span>\n</pre></div>\n</div>\n<p>It&#8217;s a simple alias for a function taking a <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> as parameter.</p>\n<p>Contrary to what you might initially expect a route does not return anything. Rather, all response processing\n(i.e. everything that needs to be done after the route itself has handled a request) is performed in\n&#8220;continuation-style&#8221; via the <tt class=\"docutils literal\"><span class=\"pre\">responder</span></tt> of the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt>. If you don&#8217;t know what this means, don&#8217;t worry.\nIt&#8217;ll become clear soon. The key point is that this design has the advantage of being completely non-blocking as well\nas actor-friendly since, this way, it&#8217;s possible to simply send off a <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> to another actor in a\n&#8220;fire-and-forget&#8221; manner, without having to worry about results handling.</p>\n<p>Generally when a route receives a request (or rather a <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt> for it) it can do one of three things:</p>\n<ul class=\"simple\">\n<li>Complete the request by calling <tt class=\"docutils literal\"><span class=\"pre\">requestContext.complete(...)</span></tt></li>\n<li>Reject the request by calling <tt class=\"docutils literal\"><span class=\"pre\">requestContext.reject(...)</span></tt></li>\n<li>Ignore the request (i.e. neither complete nor reject it)</li>\n</ul>\n<p>The first case is pretty clear, by calling <tt class=\"docutils literal\"><span class=\"pre\">complete</span></tt> a given response is sent to the client as reaction to the\nrequest. In the second case &#8220;reject&#8221; means that the route does not want to handle the request. You&#8217;ll see further down\nin the section about route composition what this is good for. The third case is usually an error. If a route does not\ndo anything with the request it will simply not be acted upon. This means that the client will not receive a response\nuntil the request times out, at which point a <tt class=\"docutils literal\"><span class=\"pre\">500</span> <span class=\"pre\">Internal</span> <span class=\"pre\">Server</span> <span class=\"pre\">Error</span></tt> response will be generated.\nTherefore your routes should usually end up either completing or rejecting the request.</p>\n<div class=\"section\" id=\"constructing-routes\">\n<h2>Constructing Routes</h2>\n<p>Since routes are ordinary functions <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">Unit</span></tt>, the simplest route is:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Response&quot;</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>or shorter:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Response&quot;</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>or even shorter (using the <a class=\"reference internal\" href=\"../../route-directives/complete/#complete\"><em>complete</em></a> directive):</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;Response&quot;</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>All these are different ways of defining the same thing, namely a <tt class=\"docutils literal\"><span class=\"pre\">Route</span></tt> that simply completes all requests with a\nstatic response.</p>\n<p>Even though you could write all your application logic as one monolithic function that inspects the <tt class=\"docutils literal\"><span class=\"pre\">RequestContext</span></tt>\nand completes it depending on its properties this type of design would be hard to read, maintain and reuse.\nTherefore <em>spray-routing</em> allows you to construct more complex routes from simpler ones through composition.</p>\n</div>\n<div class=\"section\" id=\"composing-routes\">\n<h2>Composing Routes</h2>\n<p>There are three basic operations we need for building more complex routes from simpler ones:</p>\n<ul class=\"wide simple\">\n<li>Route transformation, which delegates processing to another, &#8220;inner&#8221; route but in the process changes some properties\nof either the incoming request, the outgoing response or both</li>\n<li>Route filtering, which only lets requests satisfying a given filter condition pass and rejects all others</li>\n<li>Route chaining, which tries a second route if a given first one was rejected</li>\n</ul>\n<p>The last point is achieved with the simple operator <tt class=\"docutils literal\"><span class=\"pre\">~</span></tt>, which is available to all routes via a &#8220;pimp&#8221;, i.e. an\nimplicit &#8220;extension&#8221;. The first two points are provided by so-called <a class=\"reference internal\" href=\"../directives/#directives\"><em>Directives</em></a>, of which a large number is\nalready predefined by <em>spray-routing</em> and which you can also easily create yourself.\n<a class=\"reference internal\" href=\"../directives/#directives\"><em>Directives</em></a> deliver most of <em>spray-routings</em> power and flexibility.</p>\n</div>\n<div class=\"section\" id=\"the-routing-tree\">\n<h2>The Routing Tree</h2>\n<p>Essentially, when you combine directives and custom routes via nesting and the <tt class=\"docutils literal\"><span class=\"pre\">~</span></tt> operator, you build a routing\nstructure that forms a tree. When a request comes in it is injected into this tree at the root and flows down through\nall the branches in a depth-first manner until either some node completes it or it is fully rejected.</p>\n<p>Consider this schematic example:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">a</span> <span class=\"o\">{</span>\n    <span class=\"n\">b</span> <span class=\"o\">{</span>\n      <span class=\"n\">c</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span> <span class=\"c1\">// route 1</span>\n      <span class=\"o\">}</span> <span class=\"o\">~</span>\n      <span class=\"n\">d</span> <span class=\"o\">{</span>\n        <span class=\"o\">...</span> <span class=\"c1\">// route 2</span>\n      <span class=\"o\">}</span> <span class=\"o\">~</span>\n      <span class=\"o\">...</span> <span class=\"c1\">// route 3</span>\n    <span class=\"o\">}</span> <span class=\"o\">~</span>\n    <span class=\"n\">e</span> <span class=\"o\">{</span>\n      <span class=\"o\">...</span> <span class=\"c1\">// route 4</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Here five directives form a routing tree.</p>\n<ul class=\"wide simple\">\n<li>Route 1 will only be reached if directives <tt class=\"docutils literal\"><span class=\"pre\">a</span></tt>, <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">c</span></tt> all let the request pass through.</li>\n<li>Route 2 will run if <tt class=\"docutils literal\"><span class=\"pre\">a</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt> pass, <tt class=\"docutils literal\"><span class=\"pre\">c</span></tt> rejects and <tt class=\"docutils literal\"><span class=\"pre\">d</span></tt> passes.</li>\n<li>Route 3 will run if <tt class=\"docutils literal\"><span class=\"pre\">a</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">b</span></tt> pass, but <tt class=\"docutils literal\"><span class=\"pre\">c</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">d</span></tt> reject.</li>\n</ul>\n<p>Route 3 can therefore be seen as a &#8220;catch-all&#8221; route that only kicks in, if routes chained into preceding positions\nreject. This mechanism can make complex filtering logic quite easy to implement: simply put the most\nspecific cases up front and the most general cases in the back.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Routes", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/key-concepts/routes", "next": {"link": "../directives/", "title": "Directives"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/key-concepts/directives", "Directives", "N", "next"], ["documentation/spray-routing/key-concepts/big-picture", "Big Picture", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../", "title": "Key Concepts"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Routes</a><ul>\n<li><a class=\"reference internal\" href=\"#constructing-routes\">Constructing Routes</a></li>\n<li><a class=\"reference internal\" href=\"#composing-routes\">Composing Routes</a></li>\n<li><a class=\"reference internal\" href=\"#the-routing-tree\">The Routing Tree</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../big-picture/", "title": "Big Picture"}, "metatags": ""}