{"body": "<div class=\"section\" id=\"unmarshalling\">\n<span id=\"id1\"></span><h1>Unmarshalling</h1>\n<p>&#8220;Unmarshalling&#8221; is the process of converting some kind of a lower-level representation, often a &#8220;wire format&#8221;, into a\nhigher-level (object) structure. Other popular names for it are &#8220;Deserialization&#8221; or &#8220;Unpickling&#8221;.</p>\n<p>In <em>spray</em> &#8220;Unmarshalling&#8221; means the conversion of an <tt class=\"docutils literal\"><span class=\"pre\">HttpEntity</span></tt>, the model class for the entity body of an HTTP\nrequest or response (depending on whether used on the client or server side), into an object of type <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt>.</p>\n<p>Unmarshalling for instances of type <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt> is performed by an <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt>, which is defined like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">type</span> <span class=\"kt\">Unmarshaller</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Deserializer</span><span class=\"o\">[</span><span class=\"kt\">HttpEntity</span>, <span class=\"kt\">T</span><span class=\"o\">]</span>\n<span class=\"k\">trait</span> <span class=\"nc\">Deserializer</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">]</span> <span class=\"nc\">extends</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Deserialized</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span>\n<span class=\"k\">type</span> <span class=\"kt\">Deserialized</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Either</span><span class=\"o\">[</span><span class=\"kt\">DeserializationError</span>, <span class=\"kt\">T</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>So, an <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller</span></tt> is basically a function <tt class=\"docutils literal\"><span class=\"pre\">HttpEntity</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">Either[DeserializationError,</span> <span class=\"pre\">T]</span></tt>.\nWhen compared to their counterpart, <a class=\"reference internal\" href=\"../marshalling/#marshalling\"><em>Marshallers</em></a>, Unmarshallers are somewhat simpler, since they\nare straight functions and do not have to deal with chunk streams (which are currently not supported in unmarshalling)\nor delayed execution.)</p>\n<div class=\"section\" id=\"default-unmarshallers\">\n<h2>Default Unmarshallers</h2>\n<p><em>spray-httpx</em> comes with pre-defined Unmarshallers for the following types:</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\"><span class=\"pre\">Array[Byte]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Array[Char]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">String</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">NodeSeq</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Option[T]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.FormData</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.HttpForm</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.MultipartContent</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.MultipartFormData</span></tt></li>\n</ul>\n<p>The relevant sources are:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://github.com/spray/spray/blob/master/spray-httpx/src/main/scala/spray/httpx/unmarshalling/Deserializer.scala\">Deserializer</a></li>\n<li><a class=\"reference external\" href=\"https://github.com/spray/spray/blob/master/spray-httpx/src/main/scala/spray/httpx/unmarshalling/BasicUnmarshallers.scala\">BasicUnmarshallers</a></li>\n<li><a class=\"reference external\" href=\"https://github.com/spray/spray/blob/master/spray-httpx/src/main/scala/spray/httpx/unmarshalling/MetaUnmarshallers.scala\">MetaUnmarshallers</a></li>\n<li><a class=\"reference external\" href=\"https://github.com/spray/spray/blob/master/spray-httpx/src/main/scala/spray/httpx/unmarshalling/FormDataUnmarshallers.scala\">FormDataUnmarshallers</a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"implicit-resolution\">\n<h2>Implicit Resolution</h2>\n<p>Since the unmarshalling infrastructure uses a <a class=\"reference external\" href=\"http://stackoverflow.com/questions/5408861/what-are-type-classes-in-scala-useful-for\">type class</a> based approach <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller</span></tt> instances for a type <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt>\nhave to be available implicitly. The implicits for all the default Unmarshallers defined by <em>spray-httpx</em> are provided\nthrough the companion object of the <tt class=\"docutils literal\"><span class=\"pre\">Deserializer</span></tt> trait (since <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt> is just an alias for a\n<tt class=\"docutils literal\"><span class=\"pre\">Deserializer[HttpEntity,</span> <span class=\"pre\">T]</span></tt>). This means that they are always available and never need to be explicitly imported.\nAdditionally, you can simply &#8220;override&#8221; them by bringing your own custom version into local scope.</p>\n</div>\n<div class=\"section\" id=\"custom-unmarshallers\">\n<h2>Custom Unmarshallers</h2>\n<p><em>spray-httpx</em> gives you a few convenience tools for constructing Unmarshallers for your own types.\nOne is the <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller.apply</span></tt> helper, which is defined as such:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">unmarshalFrom</span><span class=\"k\">:</span> <span class=\"kt\">ContentTypeRange*</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">PartialFunction</span><span class=\"o\">[</span><span class=\"kt\">HttpEntity</span>, <span class=\"kt\">T</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Unmarshaller</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>The default <tt class=\"docutils literal\"><span class=\"pre\">NodeSeqMarshaller</span></tt> for example is defined with it:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">NodeSeqUnmarshaller</span> <span class=\"k\">=</span>\n  <span class=\"nc\">Unmarshaller</span><span class=\"o\">[</span><span class=\"kt\">NodeSeq</span><span class=\"o\">](</span><span class=\"n\">`text/xml`</span><span class=\"o\">,</span> <span class=\"n\">`application/xml`</span><span class=\"o\">,</span> <span class=\"n\">`text/html`</span><span class=\"o\">,</span> <span class=\"n\">`application/xhtml+xml`</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">HttpEntity</span><span class=\"o\">.</span><span class=\"nc\">NonEmpty</span><span class=\"o\">(</span><span class=\"n\">contentType</span><span class=\"o\">,</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"k\">\u21d2</span>\n      <span class=\"nc\">XML</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">InputStreamReader</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ByteArrayInputStream</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">toByteArray</span><span class=\"o\">),</span> <span class=\"n\">contentType</span><span class=\"o\">.</span><span class=\"n\">charset</span><span class=\"o\">.</span><span class=\"n\">nioCharset</span><span class=\"o\">))</span>\n    <span class=\"k\">case</span> <span class=\"nc\">HttpEntity</span><span class=\"o\">.</span><span class=\"nc\">Empty</span> <span class=\"k\">\u21d2</span> <span class=\"nc\">NodeSeq</span><span class=\"o\">.</span><span class=\"nc\">Empty</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>As another example, here is an <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller</span></tt> definition for a custom type <tt class=\"docutils literal\"><span class=\"pre\">Person</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.httpx.unmarshalling._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.util._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">`application/vnd.acme.person`</span> <span class=\"k\">=</span>\n  <span class=\"nc\">MediaTypes</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">MediaType</span><span class=\"o\">.</span><span class=\"n\">custom</span><span class=\"o\">(</span><span class=\"s\">&quot;application/vnd.acme.person&quot;</span><span class=\"o\">))</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">firstName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">PersonUnmarshaller</span> <span class=\"k\">=</span>\n    <span class=\"nc\">Unmarshaller</span><span class=\"o\">[</span><span class=\"kt\">Person</span><span class=\"o\">](</span><span class=\"n\">`application/vnd.acme.person`</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">case</span> <span class=\"nc\">HttpEntity</span><span class=\"o\">.</span><span class=\"nc\">NonEmpty</span><span class=\"o\">(</span><span class=\"n\">contentType</span><span class=\"o\">,</span> <span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n        <span class=\"c1\">// unmarshal from the string format used in the marshaller example</span>\n        <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"k\">=</span>\n          <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">asString</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;:,&quot;</span><span class=\"o\">.</span><span class=\"n\">toCharArray</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"o\">)</span>\n        <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">)</span>\n\n      <span class=\"c1\">// if we had meaningful semantics for the HttpEntity.Empty</span>\n      <span class=\"c1\">// we could add a case for the HttpEntity.Empty:</span>\n      <span class=\"c1\">// case HttpEntity.Empty =&gt; ...</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">body</span> <span class=\"k\">=</span> <span class=\"nc\">HttpEntity</span><span class=\"o\">(</span><span class=\"n\">`application/vnd.acme.person`</span><span class=\"o\">,</span> <span class=\"s\">&quot;Person: Bob, Parr, 32&quot;</span><span class=\"o\">)</span>\n<span class=\"n\">body</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Person</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"nc\">Right</span><span class=\"o\">(</span><span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">&quot;Bob&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Parr&quot;</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>As can be seen in this example you best define the <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller</span></tt> for <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt> in the companion object of <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt>.\nThis way your unmarshaller is always in-scope, without any <a class=\"reference external\" href=\"http://eed3si9n.com/revisiting-implicits-without-import-tax\">import tax</a>.</p>\n</div>\n<div class=\"section\" id=\"deriving-unmarshallers\">\n<h2>Deriving Unmarshallers</h2>\n<div class=\"section\" id=\"unmarshaller-delegate\">\n<h3>Unmarshaller.delegate</h3>\n<p>Sometimes you can save yourself some work by reusing existing Unmarshallers for your custom ones.\nThe idea is to &#8220;wrap&#8221; an existing <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller</span></tt> with come logic to &#8220;re-target&#8221; it to your type.</p>\n<p>In this regard &#8220;wrapping&#8221; a <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller</span></tt> can mean one or both of the following two things:</p>\n<ul class=\"simple\">\n<li>Transform the input <tt class=\"docutils literal\"><span class=\"pre\">HttpEntity</span></tt> before it reaches the wrapped Unmarshaller</li>\n<li>Transform the output of the wrapped Unmarshaller</li>\n</ul>\n<p>You can do both, but the existing support infrastructure favors the latter over the former.\nThe <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller.delegate</span></tt> helper allows you to turn an <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[A]</span></tt> into an <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[B]</span></tt>\nby providing a function <tt class=\"docutils literal\"><span class=\"pre\">A</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">B</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">delegate</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">unmarshalFrom</span><span class=\"k\">:</span> <span class=\"kt\">ContentTypeRange*</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"k\">implicit</span> <span class=\"n\">mb</span><span class=\"k\">:</span> <span class=\"kt\">Unmarshaller</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Unmarshaller</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>For example, by using <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller.delegate</span></tt> the <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[Person]</span></tt> from the example above could be simplified\nto this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">SimplerPersonUnmarshaller</span> <span class=\"k\">=</span>\n  <span class=\"nc\">Unmarshaller</span><span class=\"o\">.</span><span class=\"n\">delegate</span><span class=\"o\">[</span><span class=\"kt\">String</span>, <span class=\"kt\">Person</span><span class=\"o\">](</span><span class=\"n\">`application/vnd.acme.person`</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">string</span> <span class=\"k\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"nc\">Array</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"o\">(</span><span class=\"s\">&quot;:,&quot;</span><span class=\"o\">.</span><span class=\"n\">toCharArray</span><span class=\"o\">).</span><span class=\"n\">map</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"o\">)</span>\n    <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"unmarshaller-fornonempty\">\n<h3>Unmarshaller.forNonEmpty</h3>\n<p>In addition to <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller.delegate</span></tt> there is also another &#8220;deriving Unmarshaller builder&#8221; called\n<tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller.forNonEmpty</span></tt>. It &#8220;modifies&#8221; an existing Unmarshaller to not accept empty entities.</p>\n<p>For example, the default <tt class=\"docutils literal\"><span class=\"pre\">NodeSeqMarshaller</span></tt> (see above) accepts empty entities as a valid representation of\n<tt class=\"docutils literal\"><span class=\"pre\">NodeSeq.Empty</span></tt>. It might be, however, that in your application context empty entities are not allowed.\nIn order to achieve this, instead of &#8220;overriding&#8221; the existing <tt class=\"docutils literal\"><span class=\"pre\">NodeSeqMarshaller</span></tt> with an all-custom\nre-implementation you could be doing this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">myNodeSeqUnmarshaller</span> <span class=\"k\">=</span> <span class=\"nc\">Unmarshaller</span><span class=\"o\">.</span><span class=\"n\">forNonEmpty</span><span class=\"o\">[</span><span class=\"kt\">NodeSeq</span><span class=\"o\">]</span>\n\n<span class=\"nc\">HttpEntity</span><span class=\"o\">(</span><span class=\"nc\">MediaTypes</span><span class=\"o\">.</span><span class=\"n\">`text/xml`</span><span class=\"o\">,</span> <span class=\"s\">&quot;&lt;xml&gt;yeah&lt;/xml&gt;&quot;</span><span class=\"o\">).</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">NodeSeq</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"nc\">Right</span><span class=\"o\">(&lt;</span><span class=\"n\">xml</span><span class=\"o\">&gt;</span><span class=\"n\">yeah</span><span class=\"o\">&lt;/</span><span class=\"n\">xml</span><span class=\"o\">&gt;)</span>\n<span class=\"nc\">HttpEntity</span><span class=\"o\">.</span><span class=\"nc\">Empty</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">NodeSeq</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"nc\">Left</span><span class=\"o\">(</span><span class=\"nc\">ContentExpected</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"more-specific-unmarshallers\">\n<h2>More specific Unmarshallers</h2>\n<p>The plain <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt> is agnostic to whether it is used on the server- or on the client-side. This means that\nit can be used to deserialize the entities from requests as well as responses. Also, the only information that an\n<tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt> has access to for its job is the message entity. Sometimes this is not enough.</p>\n<div class=\"section\" id=\"frommessageunmarshaller\">\n<h3>FromMessageUnmarshaller</h3>\n<p>If you need access to the message headers during unmarshalling you can write an <tt class=\"docutils literal\"><span class=\"pre\">FromMessageUnmarshaller[T]</span></tt> for your\ntype. It is defined as such:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">type</span> <span class=\"kt\">FromMessageUnmarshaller</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Deserializer</span><span class=\"o\">[</span><span class=\"kt\">HttpMessage</span>, <span class=\"kt\">T</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>and allows access to all members of the <tt class=\"docutils literal\"><span class=\"pre\">HttpMessage</span></tt> superclass of the <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> types,\nmost importantly: the message headers. Since, like the plain <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt>, it can deserialize requests as well\nas responses it can be used on the server- as well as the client-side.</p>\n<p>An in-scope <tt class=\"docutils literal\"><span class=\"pre\">FromMessageUnmarshaller[T]</span></tt> takes precedence before any potentially available plain <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"fromrequestunmarshaller\">\n<h3>FromRequestUnmarshaller</h3>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">FromRequestUnmarshaller[T]</span></tt> is the most &#8220;powerful&#8221; unmarshaller that can be used on the server-side\n(and only there). It is defined like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">type</span> <span class=\"kt\">FromRequestUnmarshaller</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Deserializer</span><span class=\"o\">[</span><span class=\"kt\">HttpRequest</span>, <span class=\"kt\">T</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>and allows access to all members of the incoming <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> instance.</p>\n<p>An in-scope <tt class=\"docutils literal\"><span class=\"pre\">FromRequestUnmarshaller[T]</span></tt> takes precedence before any potentially available\n<tt class=\"docutils literal\"><span class=\"pre\">FromMessageUnmarshaller[T]</span></tt> or plain <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt>.</p>\n</div>\n<div class=\"section\" id=\"fromresponseunmarshaller\">\n<h3>FromResponseUnmarshaller</h3>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">FromResponseUnmarshaller[T]</span></tt> is the most &#8220;powerful&#8221; unmarshaller that can be used on the client-side\n(and only there). It is defined like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">type</span> <span class=\"kt\">FromResponseUnmarshaller</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Deserializer</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span>, <span class=\"kt\">T</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>and allows access to all members of the incoming <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> instance.</p>\n<p>An in-scope <tt class=\"docutils literal\"><span class=\"pre\">FromResponseUnmarshaller[T]</span></tt> takes precedence before any potentially available\n<tt class=\"docutils literal\"><span class=\"pre\">FromMessageUnmarshaller[T]</span></tt> or plain <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt>.</p>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "Unmarshalling", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-httpx/unmarshalling", "next": {"link": "../de-compression/", "title": "(De)compression"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-httpx/de-compression", "(De)compression", "N", "next"], ["documentation/spray-httpx/marshalling", "Marshalling", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-httpx"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Unmarshalling</a><ul>\n<li><a class=\"reference internal\" href=\"#default-unmarshallers\">Default Unmarshallers</a></li>\n<li><a class=\"reference internal\" href=\"#implicit-resolution\">Implicit Resolution</a></li>\n<li><a class=\"reference internal\" href=\"#custom-unmarshallers\">Custom Unmarshallers</a></li>\n<li><a class=\"reference internal\" href=\"#deriving-unmarshallers\">Deriving Unmarshallers</a><ul>\n<li><a class=\"reference internal\" href=\"#unmarshaller-delegate\">Unmarshaller.delegate</a></li>\n<li><a class=\"reference internal\" href=\"#unmarshaller-fornonempty\">Unmarshaller.forNonEmpty</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#more-specific-unmarshallers\">More specific Unmarshallers</a><ul>\n<li><a class=\"reference internal\" href=\"#frommessageunmarshaller\">FromMessageUnmarshaller</a></li>\n<li><a class=\"reference internal\" href=\"#fromrequestunmarshaller\">FromRequestUnmarshaller</a></li>\n<li><a class=\"reference internal\" href=\"#fromresponseunmarshaller\">FromResponseUnmarshaller</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../marshalling/", "title": "Marshalling"}, "metatags": ""}