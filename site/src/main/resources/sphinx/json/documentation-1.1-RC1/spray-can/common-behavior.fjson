{"body": "<div class=\"section\" id=\"common-behavior\">\n<span id=\"commonbehavior\"></span><h1>Common Behavior</h1>\n<p>The <em>spray-can</em> <a class=\"reference internal\" href=\"../http-server/#http-server\"><em>HTTP Server</em></a> and <a class=\"reference internal\" href=\"../http-client/#http-client-apis\"><em>HTTP Client APIs</em></a> share a number of command and event messages that are\nexplained in this chapter.</p>\n<div class=\"section\" id=\"closing-connections\">\n<h2>Closing Connections</h2>\n<p>Server- and client-side connection actors can be sent one of three defined <tt class=\"docutils literal\"><span class=\"pre\">Http.CloseCommand</span></tt> messages in order to\ntrigger the closing of an HTTP connection. They mirror the <a class=\"reference external\" href=\"http://doc.akka.io/docs/akka/2.2.0-RC1/scala/io-tcp.html#Closing_connections\">TCP-level commands and events from Akka IO</a> and have the\nfollowing semantics:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">Http.Close</span></tt></dt>\n<dd>A &#8220;regular&#8221; close. Potentially pending unsent data are flushed to the connection before a TCP FIN is sent.\nThe peers FIN ACK is <em>not</em> awaited. If the close is successful the sender will be notified with an <tt class=\"docutils literal\"><span class=\"pre\">Http.Closed</span></tt>\nevent message.</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">Http.ConfirmedClose</span></tt></dt>\n<dd>The closing of the connection is intially started by flushing pending writes and sending a TCP FIN to the peer.\nData will continue to be received until the peer closes the connection too with its own FIN.\nIf the close is successful the sender will be notified with an <tt class=\"docutils literal\"><span class=\"pre\">Http.ConfirmedClosed</span></tt> event message.</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">Http.Abort</span></tt></dt>\n<dd>Immediately terminates the connection by sending a RST message to the peer. Pending writes are <strong>not</strong> flushed.\nIf the close is successful the sender will be notified with an <tt class=\"docutils literal\"><span class=\"pre\">Http.Aborted</span></tt> event message.</dd>\n</dl>\n<p>In addition to the confirmation events mentioned above the connection actor will dispatch two other events derived from\nthe <tt class=\"docutils literal\"><span class=\"pre\">Http.ConnectionClosed</span></tt> trait in certain cases:</p>\n<dl class=\"docutils\">\n<dt><tt class=\"docutils literal\"><span class=\"pre\">Http.PeerClosed</span></tt></dt>\n<dd>Dispatched when the remote peer has closed the connection without &#8220;our&#8221; side having initiated the close first.</dd>\n<dt><tt class=\"docutils literal\"><span class=\"pre\">Http.ErrorClosed</span></tt></dt>\n<dd>Dispatched whenever an error occurred that forced the connection to be closed.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"acked-sends\">\n<span id=\"id2\"></span><h2>ACKed Sends</h2>\n<p>If required the server- and client-side connection actors can confirm the successful delivery of an HTTP message (part)\nto the OS network layer by replying with a &#8220;send ACK&#8221; message. The application can request a send ACK by modifying a\nmessage part with the <tt class=\"docutils literal\"><span class=\"pre\">withAck</span></tt> method. For example, the following handler logic receives the String &#8220;ok&#8221; as an actor\nmessage after the response has been successfully written to the connections socket:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n  <span class=\"k\">case</span> <span class=\"nc\">HttpRequest</span><span class=\"o\">(</span><span class=\"nc\">GET</span><span class=\"o\">,</span> <span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"nc\">Path</span><span class=\"o\">(</span><span class=\"s\">&quot;/ping&quot;</span><span class=\"o\">),</span> <span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n    <span class=\"n\">sender</span> <span class=\"o\">!</span> <span class=\"nc\">HttpResponse</span><span class=\"o\">(</span><span class=\"n\">entity</span> <span class=\"k\">=</span> <span class=\"s\">&quot;PONG&quot;</span><span class=\"o\">).</span><span class=\"n\">withAck</span><span class=\"o\">(</span><span class=\"s\">&quot;ok&quot;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">case</span> <span class=\"s\">&quot;ok&quot;</span> <span class=\"k\">=&gt;</span> <span class=\"n\">println</span><span class=\"o\">(</span><span class=\"s\">&quot;Response was sent successfully&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Such ACK messages are especially helpful for triggering the sending of the next message part in a request- or response\nstreaming scenario since with such a design the application will never produce more data than the network can handle.</p>\n<p>Send ACKs are always dispatched to the actor which sent the respective message (part).\nThey are only supported on the server-side as well as on the client-side connection-level API (i.e. not currently on the\nclient-side host- and request-level APIs).</p>\n</div>\n</div>\n", "display_toc": true, "title": "Common Behavior", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-can/common-behavior", "next": {"link": "../examples/", "title": "Examples"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-can/examples", "Examples", "N", "next"], ["documentation/spray-can/http-client/request-level", "Request-level API", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-can"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Common Behavior</a><ul>\n<li><a class=\"reference internal\" href=\"#closing-connections\">Closing Connections</a></li>\n<li><a class=\"reference internal\" href=\"#acked-sends\">ACKed Sends</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../http-client/request-level/", "title": "Request-level API"}, "metatags": ""}