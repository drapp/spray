{"body": "<div class=\"section\" id=\"spray-testkit\">\n<span id=\"id1\"></span><h1>spray-testkit</h1>\n<p>One of <em>sprays</em> core design goals is good testability of the created services. Since actor-based systems can sometimes\nbe cumbersome to test <em>spray</em> fosters the separation of processing logic from actor code in most of its modules.</p>\n<p>For services built with <a class=\"reference internal\" href=\"../spray-routing/#spray-routing\"><em>spray-routing</em></a> <em>spray</em> provides a dedicated test DSL that makes actor-less testing of\nroute logic easy and convenient. This &#8220;route test DSL&#8221; is made available with the <em>spray-testkit</em> module.</p>\n<div class=\"section\" id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>Apart from the Scala library (see <a class=\"reference internal\" href=\"../../project-info/current-versions/#current-versions\"><em>Current Versions</em></a> chapter) <em>spray-testkit</em> depends on</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../spray-http/#spray-http\"><em>spray-http</em></a> (with &#8216;provided&#8217; scope)</li>\n<li><a class=\"reference internal\" href=\"../spray-httpx/#spray-httpx\"><em>spray-httpx</em></a> (with &#8216;provided&#8217; scope)</li>\n<li><a class=\"reference internal\" href=\"../spray-routing/#spray-routing\"><em>spray-routing</em></a> (with &#8216;provided&#8217; scope)</li>\n<li><a class=\"reference internal\" href=\"../spray-util/#spray-util\"><em>spray-util</em></a></li>\n<li>akka-actor 2.0.x (with &#8216;provided&#8217; scope, i.e. you need to pull it in yourself)</li>\n<li>akka-testkit 2.0.x (with &#8216;provided&#8217; scope, i.e. you need to pull it in yourself)</li>\n<li><a class=\"reference external\" href=\"http://scalatest.org/\">scalatest</a> (with &#8216;provided&#8217; scope, for the <tt class=\"docutils literal\"><span class=\"pre\">ScalatestRouteTest</span></tt>)</li>\n<li><a class=\"reference external\" href=\"http://etorreborre.github.com/specs2/\">specs2</a> (with &#8216;provided&#8217; scope, for the <tt class=\"docutils literal\"><span class=\"pre\">Specs2RouteTest</span></tt>)</li>\n</ul>\n</div>\n<div class=\"section\" id=\"installation\">\n<h2>Installation</h2>\n<p>The <a class=\"reference internal\" href=\"../../project-info/maven-repository/#maven-repo\"><em>Maven Repository</em></a> chapter contains all the info about how to pull <em>spray-testkit</em> into your classpath.\nHowever, since you normally don&#8217;t need to have access to <em>spray-testkit</em> from your production code, you should limit\nthe dependency to the <tt class=\"docutils literal\"><span class=\"pre\">test</span></tt> scope:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">libraryDependencies</span> <span class=\"o\">+=</span> <span class=\"s\">&quot;io.spray&quot;</span> <span class=\"o\">%</span> <span class=\"s\">&quot;spray-testkit&quot;</span> <span class=\"o\">%</span> <span class=\"n\">version</span> <span class=\"o\">%</span> <span class=\"s\">&quot;test&quot;</span>\n</pre></div>\n</div>\n<p>Currently <em>spray-testkit</em> supports the two most popular scala testing frameworks, <a class=\"reference external\" href=\"http://scalatest.org/\">scalatest</a> and <a class=\"reference external\" href=\"http://etorreborre.github.com/specs2/\">specs2</a>. Depending on\nwhich one you are using you need to mix either the <tt class=\"docutils literal\"><span class=\"pre\">ScalatestRouteTest</span></tt> or the <tt class=\"docutils literal\"><span class=\"pre\">Specs2RouteTest</span></tt> trait into your\ntest specification.</p>\n</div>\n<div class=\"section\" id=\"usage\">\n<h2>Usage</h2>\n<p>Here is an example of what a simple test with <em>spray-testkit</em> might look like:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">org.specs2.mutable.Specification</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.testkit.Specs2RouteTest</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.routing.HttpService</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.http.StatusCodes._</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FullTestKitExampleSpec</span> <span class=\"k\">extends</span> <span class=\"nc\">Specification</span> <span class=\"k\">with</span> <span class=\"nc\">Specs2RouteTest</span> <span class=\"k\">with</span> <span class=\"nc\">HttpService</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">actorRefFactory</span> <span class=\"k\">=</span> <span class=\"n\">system</span> <span class=\"c1\">// connect the DSL to the test ActorSystem</span>\n\n  <span class=\"k\">val</span> <span class=\"n\">smallRoute</span> <span class=\"k\">=</span>\n    <span class=\"n\">get</span> <span class=\"o\">{</span>\n      <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">complete</span> <span class=\"o\">{</span>\n          <span class=\"o\">&lt;</span><span class=\"n\">html</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n              <span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span><span class=\"nc\">Say</span> <span class=\"n\">hello</span> <span class=\"n\">to</span> <span class=\"o\">&lt;</span><span class=\"n\">i</span><span class=\"o\">&gt;</span><span class=\"n\">spray</span><span class=\"o\">&lt;/</span><span class=\"n\">i</span><span class=\"o\">&gt;!&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;/</span><span class=\"n\">body</span><span class=\"o\">&gt;</span>\n          <span class=\"o\">&lt;/</span><span class=\"n\">html</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span> <span class=\"o\">~</span>\n      <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;ping&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;PONG!&quot;</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n  <span class=\"s\">&quot;The service&quot;</span> <span class=\"n\">should</span> <span class=\"o\">{</span>\n\n    <span class=\"s\">&quot;return a greeting for GET requests to the root path&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Get</span><span class=\"o\">()</span> <span class=\"o\">~&gt;</span> <span class=\"n\">smallRoute</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n        <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"n\">must</span> <span class=\"n\">contain</span><span class=\"o\">(</span><span class=\"s\">&quot;Say hello&quot;</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"s\">&quot;return a &#39;PONG!&#39; response for GET requests to /ping&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/ping&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">smallRoute</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n        <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"s\">&quot;PONG!&quot;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"s\">&quot;leave GET requests to other paths unhandled&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/kermit&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">smallRoute</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n        <span class=\"n\">handled</span> <span class=\"n\">must</span> <span class=\"n\">beFalse</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"s\">&quot;return a MethodNotAllowed error for PUT requests to the root path&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n      <span class=\"nc\">Put</span><span class=\"o\">()</span> <span class=\"o\">~&gt;</span> <span class=\"n\">sealRoute</span><span class=\"o\">(</span><span class=\"n\">smallRoute</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n        <span class=\"n\">status</span> <span class=\"o\">===</span> <span class=\"nc\">MethodNotAllowed</span>\n        <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"s\">&quot;HTTP method not allowed, supported methods: GET&quot;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>The basic structure of a test built with <em>spray-testkit</em> is this (expression placeholder in all-caps):</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"nc\">REQUEST</span> <span class=\"o\">~&gt;</span> <span class=\"nc\">ROUTE</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n  <span class=\"nc\">ASSERTIONS</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>In this template <em>REQUEST</em> is an expression evaluating to an <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> instance. Since both <em>RouteTest</em> traits\nextend the <em>spray-httpx</em> <a class=\"reference internal\" href=\"../spray-httpx/request-building/#requestbuilding\"><em>Request Building</em></a> trait you have access to its mini-DSL for convenient and concise request\nconstruction. <a class=\"footnote-reference\" href=\"#id3\" id=\"id2\">[1]</a></p>\n<p><em>ROUTE</em> is an expression evaluating to a <em>spray-routing</em> <tt class=\"docutils literal\"><span class=\"pre\">Route</span></tt>. You can specify one inline or simply refer to the\nroute structure defined in your service.</p>\n<p>The final element of the <tt class=\"docutils literal\"><span class=\"pre\">~&gt;</span></tt> chain is a <tt class=\"docutils literal\"><span class=\"pre\">check</span></tt> call, which takes a block of assertions as parameter. In this block\nyou define your requirements onto the result produced by your route after having processed the given request. Typically\nyou use one of the defined &#8220;inspectors&#8221; to retrieve a particular element of the routes response and express assertions\nagainst it using the test DSL provided by your test framework. For example, with <a class=\"reference external\" href=\"http://etorreborre.github.com/specs2/\">specs2</a>, in order to verify that your\nroute responds to the request with a status 200 response, you&#8217;d use the <tt class=\"docutils literal\"><span class=\"pre\">status</span></tt> inspector and express an assertion\nlike this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">status</span> <span class=\"n\">mustEqual</span> <span class=\"mi\">200</span>\n</pre></div>\n</div>\n<p>The following inspectors are defined:</p>\n<table border=\"1\" class=\"table table-striped docutils\">\n<colgroup>\n<col width=\"40%\" />\n<col width=\"60%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Inspector</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">body:</span> <span class=\"pre\">HttpEntity.NonEmpty</span></tt></td>\n<td>Returns the contents of the response entity. If the response entity is\nempty a test failure is triggered.</td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">charset:</span> <span class=\"pre\">HttpCharset</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">contentType.charset</span></tt></td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">chunks:</span> <span class=\"pre\">List[MessageChunk]</span></tt></td>\n<td>Returns the list of message chunks produced by the route.</td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">closingExtension:</span> <span class=\"pre\">String</span></tt></td>\n<td>Returns chunk extensions the route produced with a\n<tt class=\"docutils literal\"><span class=\"pre\">ChunkedMessageEnd</span></tt> response part.</td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">contentType:</span> <span class=\"pre\">ContentType</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">body.contentType</span></tt></td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">definedCharset:</span> <span class=\"pre\">Option[HttpCharset]</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">contentType.definedCharset</span></tt></td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">entity:</span> <span class=\"pre\">HttpEntity</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">response.entity</span></tt></td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">handled:</span> <span class=\"pre\">Boolean</span></tt></td>\n<td>Indicates whether the route produced an <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> for the\nrequest. If the route rejected the request <tt class=\"docutils literal\"><span class=\"pre\">handled</span></tt> evaluates to\n<tt class=\"docutils literal\"><span class=\"pre\">false</span></tt>.</td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">header(name:</span> <span class=\"pre\">String):</span> <span class=\"pre\">Option[HttpHeader]</span></tt></td>\n<td>Returns the response header with the given name or <tt class=\"docutils literal\"><span class=\"pre\">None</span></tt> if no such\nheader can be found.</td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">header[T</span> <span class=\"pre\">&lt;:</span> <span class=\"pre\">HttpHeader:</span> <span class=\"pre\">ClassTag]:</span> <span class=\"pre\">Option[T]</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">response.header[T]</span></tt></td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">headers:</span> <span class=\"pre\">List[HttpHeader]</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">response.headers</span></tt></td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">mediaType:</span> <span class=\"pre\">MediaType</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">contentType.mediaType</span></tt></td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">rejection:</span> <span class=\"pre\">Rejection</span></tt></td>\n<td>The rejection produced by the route. If the route did not produce\nexactly one rejection a test failure is triggered.</td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">rejections:</span> <span class=\"pre\">List[Rejection]</span></tt></td>\n<td>The rejections produced by the route. If the route did not reject the\nrequest a test failure is triggered.</td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">response:</span> <span class=\"pre\">HttpResponse</span></tt></td>\n<td>The <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> returned by the route. If the route did not return\nan <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> instance (e.g. because it rejected the request) a\ntest failure is triggered.</td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">responseAs[T:</span> <span class=\"pre\">Unmarshaller:</span> <span class=\"pre\">ClassTag]:</span> <span class=\"pre\">T</span></tt></td>\n<td>Unmarshals the response entity using the in-scope\n<tt class=\"docutils literal\"><span class=\"pre\">FromResponseUnmarshaller</span></tt> for the given type. Any errors in the\nprocess trigger a test failure.</td>\n</tr>\n<tr class=\"row-even\"><td><tt class=\"docutils literal\"><span class=\"pre\">status:</span> <span class=\"pre\">StatusCode</span></tt></td>\n<td>Identical to <tt class=\"docutils literal\"><span class=\"pre\">response.status</span></tt></td>\n</tr>\n<tr class=\"row-odd\"><td><tt class=\"docutils literal\"><span class=\"pre\">trailer:</span> <span class=\"pre\">List[HttpHeader]</span></tt></td>\n<td>Returns the list of trailer headers the route produced with a\n<tt class=\"docutils literal\"><span class=\"pre\">ChunkedMessageEnd</span></tt> response part.</td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils footnote\" frame=\"void\" id=\"id3\" rules=\"none\">\n<colgroup><col class=\"label\" /><col /></colgroup>\n<tbody valign=\"top\">\n<tr><td class=\"label\"><a class=\"fn-backref\" href=\"#id2\">[1]</a></td><td>If the request URI is relative it will be made absolute using an implicitly available instance of\n<tt class=\"docutils literal\"><span class=\"pre\">DefaultHostInfo</span></tt> whose value is &#8220;<a class=\"reference external\" href=\"http://example.com\">http://example.com</a>&#8221; by default. This mirrors the behavior of <em>spray-can</em>\nwhich always produces absolute URIs for incoming request based on the request URI and the <tt class=\"docutils literal\"><span class=\"pre\">Host</span></tt>-header of\nthe request. You can customize this behavior by bringing an instance of <tt class=\"docutils literal\"><span class=\"pre\">DefaultHostInfo</span></tt> into scope.</td></tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"sealing-routes\">\n<h2>Sealing Routes</h2>\n<p>The section above describes how to test a &#8220;regular&#8221; branch of your route structure, which reacts to incoming requests\nwith HTTP response parts or rejections. Sometimes, however, you will want to verify that your service also translates\n<a class=\"reference internal\" href=\"../spray-routing/key-concepts/rejections/#rejections\"><em>Rejections</em></a> to HTTP responses in the way you expect.</p>\n<p>You do this by wrapping your route with the <tt class=\"docutils literal\"><span class=\"pre\">sealRoute</span></tt> method defined by the <tt class=\"docutils literal\"><span class=\"pre\">HttpService</span></tt> trait.\nThe <tt class=\"docutils literal\"><span class=\"pre\">sealRoute</span></tt> wrapper applies the logic of the in-scope <a class=\"reference internal\" href=\"../spray-routing/key-concepts/exception-handling/#exception-handling\"><em>ExceptionHandler</em></a> and\n<a class=\"reference internal\" href=\"../spray-routing/key-concepts/rejections/#rejections\"><em>RejectionHandler</em></a> to all exceptions and rejections coming back from the route, and translates them\nto the respective <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt>.</p>\n<p>The <a class=\"reference internal\" href=\"../spray-routing/examples/#on-spray-can\"><em>on-spray-can</em></a> examples defines a simple test using <tt class=\"docutils literal\"><span class=\"pre\">sealRoute</span></tt> like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"s\">&quot;return a MethodNotAllowed error for PUT requests to the root path&quot;</span> <span class=\"n\">in</span> <span class=\"o\">{</span>\n  <span class=\"nc\">Put</span><span class=\"o\">()</span> <span class=\"o\">~&gt;</span> <span class=\"n\">sealRoute</span><span class=\"o\">(</span><span class=\"n\">demoRoute</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n    <span class=\"n\">status</span> <span class=\"o\">===</span> <span class=\"nc\">MethodNotAllowed</span>\n    <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"o\">===</span> <span class=\"s\">&quot;HTTP method not allowed, supported methods: GET, POST&quot;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"examples\">\n<h2>Examples</h2>\n<p>A full example of how an API service definition can be structured in order to be testable with <em>spray-testkit</em> and\nwithout actor involvement is shown with the <a class=\"reference internal\" href=\"../spray-routing/examples/#on-spray-can\"><em>on-spray-can</em></a> example. <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/master/examples/spray-routing/on-spray-can/src/test/scala/spray/examples/DemoServiceSpec.scala\">This</a> is its test definition.</p>\n<p>Another great pool of examples are the tests for all the predefined directives in <a class=\"reference internal\" href=\"../spray-routing/#spray-routing\"><em>spray-routing</em></a>.\nThey can be found <a class=\"reference external\" href=\"https://github.com/spray/spray/tree/release/1.0/spray-routing-tests/src/test/scala/spray/routing\">here</a>.</p>\n</div>\n</div>\n", "display_toc": true, "title": "spray-testkit", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-testkit/index", "next": {"link": "../spray-util/", "title": "spray-util"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-util/index", "spray-util", "N", "next"], ["documentation/spray-servlet/index", "spray-servlet", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "Documentation"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">spray-testkit</a><ul>\n<li><a class=\"reference internal\" href=\"#dependencies\">Dependencies</a></li>\n<li><a class=\"reference internal\" href=\"#installation\">Installation</a></li>\n<li><a class=\"reference internal\" href=\"#usage\">Usage</a></li>\n<li><a class=\"reference internal\" href=\"#sealing-routes\">Sealing Routes</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../spray-servlet/", "title": "spray-servlet"}, "metatags": ""}