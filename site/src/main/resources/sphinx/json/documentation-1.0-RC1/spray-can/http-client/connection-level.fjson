{"body": "<div class=\"section\" id=\"connection-level-api\">\n<span id=\"connectionlevelapi\"></span><h1>Connection-level API</h1>\n<p>The connection-level API is the lowest-level client-side API <em>spray-can</em> provides. It gives you full control over when\nHTTP connections are opened and closed and when requests are to be send across which connection. As such it offers the\nhighest flexibility at the cost of providing the least convenience.</p>\n<div class=\"section\" id=\"opening-http-connections\">\n<h2>Opening HTTP Connections</h2>\n<p>With the connection-level API you open a new HTTP connection to a given host by sending an <tt class=\"docutils literal\"><span class=\"pre\">Http.Connect</span></tt> command\nmessage to the <tt class=\"docutils literal\"><span class=\"pre\">Http</span></tt> extensions as such:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"nc\">IO</span><span class=\"o\">(</span><span class=\"nc\">Http</span><span class=\"o\">)</span> <span class=\"o\">!</span> <span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"nc\">Connect</span><span class=\"o\">(</span><span class=\"s\">&quot;www.spray.io&quot;</span><span class=\"o\">,</span> <span class=\"n\">port</span> <span class=\"k\">=</span> <span class=\"mi\">8080</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>Apart from the host name and port the <tt class=\"docutils literal\"><span class=\"pre\">Http.Connect</span></tt> message also allows you to specify socket options and a larger\nnumber of configuration settings for the connection.</p>\n<p>Upon receipt of an <tt class=\"docutils literal\"><span class=\"pre\">Http.Connect</span></tt> message <em>spray-can</em> internally spawns a new <tt class=\"docutils literal\"><span class=\"pre\">HttpClientConnection</span></tt> actor that\nmanages a single HTTP connection across all of its lifetime. Your code never deals with the <tt class=\"docutils literal\"><span class=\"pre\">HttpClientConnection</span></tt>\nactor class directly, in fact it is marked <tt class=\"docutils literal\"><span class=\"pre\">private</span></tt> to the <em>spray-can</em> package. All communication with a connection\nactor happens purely via actor messages, the majority of which are defined in the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.0/spray-can/src/main/scala/spray/can/Http.scala#L29\">spray.can.Http</a> object.</p>\n<p>After a new connection actor has been started it tries to open a new TCP connection to the given endpoint and responds\nwith an <tt class=\"docutils literal\"><span class=\"pre\">Http.Connected</span></tt> event message to the sender of the <tt class=\"docutils literal\"><span class=\"pre\">Http.Connect</span></tt> command as soon as the connection has\nbeen successfully established. If the connection could not be opened for whatever reason an <tt class=\"docutils literal\"><span class=\"pre\">Http.CommandFailed</span></tt> event\nis being dispatched instead and the connection actor is stopped.</p>\n</div>\n<div class=\"section\" id=\"request-response-cycle\">\n<h2>Request-Response Cycle</h2>\n<p>Once the connection actor has responded with an <tt class=\"docutils literal\"><span class=\"pre\">Http.Connected</span></tt> event you can send it one or more <em>spray-http</em>\n<tt class=\"docutils literal\"><span class=\"pre\">HttpRequestPart</span></tt> messages. The connection actor will serialize them across the connection and wait for responses.\nAs soon as a response for a request has been received it is dispatched as a <tt class=\"docutils literal\"><span class=\"pre\">HttpResponsePart</span></tt>\ninstance to the sender of the respective request.</p>\n<p>After having received a response for a request the application can decide to send another request across the same\nconnection (i.e. to the same connection actor) or close the connection and (potentially) open a new one.</p>\n</div>\n<div class=\"section\" id=\"closing-connections\">\n<h2>Closing Connections</h2>\n<p>Unless some kind of error (or timeout) occurs the connection actor will never actively close an established connection,\neven if the response contains a <tt class=\"docutils literal\"><span class=\"pre\">Connection:</span> <span class=\"pre\">close</span></tt> header. The application can decide to actively close a connection\nby sending the connection actor one of the <tt class=\"docutils literal\"><span class=\"pre\">Http.CloseCommand</span></tt> messages described in the chapter about\n<a class=\"reference internal\" href=\"../../common-behavior/#commonbehavior\"><em>Common Behavior</em></a>.</p>\n<p>Close notification events are dispatched to the senders of all requests that still have unfinished responses pending as\nwell as all actors that might have already sent <tt class=\"docutils literal\"><span class=\"pre\">Http.CloseCommand</span></tt> messages.</p>\n</div>\n<div class=\"section\" id=\"timeouts\">\n<h2>Timeouts</h2>\n<p>If no response to a request is received within the configured <tt class=\"docutils literal\"><span class=\"pre\">request-timeout</span></tt> period the connection actor closes\nthe connection and dispatches an <tt class=\"docutils literal\"><span class=\"pre\">Http.Closed</span></tt> event message to the senders of all requests that are currently open.</p>\n<p>If the connection is closed after the configured <tt class=\"docutils literal\"><span class=\"pre\">idle-timeout</span></tt> has expired the connection actor simply closes the\nconnection and stops itself. If the application would like to be notified of such events it should &#8220;watch&#8221; the\nconnection actor and react to the respective <tt class=\"docutils literal\"><span class=\"pre\">Terminated</span></tt> events (which is a good idea in any case).</p>\n<p>In order to change the respective config setting <em>for this connection only</em> the application can send the following\nmessages to the connection actor:</p>\n<ul class=\"simple\">\n<li>spray.io.ConnectionTimeouts.SetIdleTimeout</li>\n<li>spray.http.SetRequestTimeout</li>\n</ul>\n</div>\n</div>\n", "display_toc": true, "title": "Connection-level API", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-can/http-client/connection-level", "next": {"link": "../host-level/", "title": "Host-level API"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-can/http-client/host-level", "Host-level API", "N", "next"], ["documentation/spray-can/http-client/index", "HTTP Client APIs", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-can"}, {"link": "../", "title": "HTTP Client APIs"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Connection-level API</a><ul>\n<li><a class=\"reference internal\" href=\"#opening-http-connections\">Opening HTTP Connections</a></li>\n<li><a class=\"reference internal\" href=\"#request-response-cycle\">Request-Response Cycle</a></li>\n<li><a class=\"reference internal\" href=\"#closing-connections\">Closing Connections</a></li>\n<li><a class=\"reference internal\" href=\"#timeouts\">Timeouts</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../", "title": "HTTP Client APIs"}, "metatags": ""}