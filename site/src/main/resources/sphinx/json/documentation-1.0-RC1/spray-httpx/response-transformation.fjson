{"body": "<div class=\"section\" id=\"response-transformation\">\n<span id=\"responsetransformation\"></span><h1>Response Transformation</h1>\n<p>The counterpart to <a class=\"reference internal\" href=\"../request-building/#requestbuilding\"><em>Request Building</em></a> is the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.0/spray-httpx/src/main/scala/spray/httpx/ResponseTransformation.scala\">ResponseTransformation</a> trait, which is especially useful on the\nclient-side when you want to transform an incoming HTTP response in a number of loosely coupled steps into some kind of\nhigher-level result type (see also <a class=\"reference internal\" href=\"../../spray-client/#spray-client\"><em>spray-client</em></a>).</p>\n<p>Just like with <tt class=\"docutils literal\"><span class=\"pre\">RequestBuilding</span></tt> the <tt class=\"docutils literal\"><span class=\"pre\">ResponseTransformation</span></tt> trait gives you the <tt class=\"docutils literal\"><span class=\"pre\">~&gt;</span></tt> operator, which allows\nyou to &#8220;append&#8221; a transformation function onto an existing function producing an <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt>. Thereby it doesn&#8217;t\nmatter whether the result is a plain response or a response wrapped in a <tt class=\"docutils literal\"><span class=\"pre\">Future</span></tt>.</p>\n<p>For example, if you have a function:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span> <span class=\"c1\">// for futures</span>\n\n<span class=\"k\">val</span> <span class=\"n\">sendReceive</span><span class=\"k\">:</span> <span class=\"kt\">HttpRequest</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"c1\">// ...</span>\n</pre></div>\n</div>\n<p>and a &#8220;response transformer&#8221;:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">val</span> <span class=\"n\">removeCookieHeaders</span><span class=\"k\">:</span> <span class=\"kt\">HttpResponse</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">HttpResponse</span> <span class=\"k\">=</span>\n  <span class=\"n\">r</span> <span class=\"k\">=&gt;</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">withHeaders</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">isNot</span><span class=\"o\">(</span><span class=\"s\">&quot;set-cookie&quot;</span><span class=\"o\">)))</span>\n</pre></div>\n</div>\n<p>you can use the <tt class=\"docutils literal\"><span class=\"pre\">~&gt;</span></tt> operator to combine the two:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.httpx.ResponseTransformation._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">pipeline</span><span class=\"k\">:</span> <span class=\"kt\">HttpRequest</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"n\">sendReceive</span> <span class=\"o\">~&gt;</span> <span class=\"n\">removeCookieHeaders</span>\n</pre></div>\n</div>\n<p>More generally the <tt class=\"docutils literal\"><span class=\"pre\">~&gt;</span></tt> operator combines functions in the following ways:</p>\n<table border=\"1\" class=\"table table-striped docutils\">\n<colgroup>\n<col width=\"33%\" />\n<col width=\"33%\" />\n<col width=\"33%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">X</th>\n<th class=\"head\">Y</th>\n<th class=\"head\">X ~&gt; Y</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td>A =&gt; B</td>\n<td>B =&gt; C</td>\n<td>A =&gt; C</td>\n</tr>\n<tr class=\"row-odd\"><td>A =&gt; Future[B]</td>\n<td>B =&gt; C</td>\n<td>A =&gt; Future[C]</td>\n</tr>\n<tr class=\"row-even\"><td>A =&gt; Future[B]</td>\n<td>B =&gt; Future[C]</td>\n<td>A =&gt; Future[C]</td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"predefined-response-transformers\">\n<h2>Predefined Response Transformers</h2>\n<dl class=\"docutils\">\n<dt>decode(decoder: Decoder): HttpResponse \u21d2 HttpResponse</dt>\n<dd>Decodes a response using the given Decoder (<tt class=\"docutils literal\"><span class=\"pre\">Gzip</span></tt> or <tt class=\"docutils literal\"><span class=\"pre\">Deflate</span></tt>).</dd>\n<dt>unmarshal[T: Unmarshaller]: HttpResponse \u21d2 T</dt>\n<dd>Unmarshalls the response to a custom type using the in-scope <tt class=\"docutils literal\"><span class=\"pre\">Unmarshaller[T]</span></tt>.</dd>\n<dt>logResponse(...): HttpResponse \u21d2 HttpResponse</dt>\n<dd>Doesn&#8217;t actually change the response but simply logs it.</dd>\n</dl>\n</div>\n</div>\n", "display_toc": true, "title": "Response Transformation", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-httpx/response-transformation", "next": {"link": "../spray-json-support/", "title": "spray-json Support"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-httpx/spray-json-support", "spray-json Support", "N", "next"], ["documentation/spray-httpx/request-building", "Request Building", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-httpx"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Response Transformation</a><ul>\n<li><a class=\"reference internal\" href=\"#predefined-response-transformers\">Predefined Response Transformers</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../request-building/", "title": "Request Building"}, "metatags": ""}