{"body": "<div class=\"section\" id=\"request-building\">\n<span id=\"requestbuilding\"></span><h1>Request Building</h1>\n<p>When you work with <em>spray</em> you&#8217;ll occasionally want to construct HTTP requests, e.g. when talking to an HTTP server\nwith <a class=\"reference internal\" href=\"../../spray-client/#spray-client\"><em>spray-client</em></a> or when writing tests for your server-side API with <a class=\"reference internal\" href=\"../../spray-testkit/#spray-testkit\"><em>spray-testkit</em></a>.</p>\n<p>For making request construction more convenient <em>spray-httpx</em> provides the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.0/spray-httpx/src/main/scala/spray/httpx/RequestBuilding.scala\">RequestBuilding</a> trait, that defines a\nsimple DSL for assembling HTTP requests in a concise and readable manner.</p>\n<p>Take a look at these examples:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.httpx.RequestBuilding._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">HttpMethods._</span>\n<span class=\"k\">import</span> <span class=\"nn\">HttpHeaders._</span>\n<span class=\"k\">import</span> <span class=\"nn\">ContentTypes._</span>\n\n<span class=\"c1\">// simple GET requests</span>\n<span class=\"nc\">Get</span><span class=\"o\">()</span> <span class=\"o\">===</span> <span class=\"nc\">HttpRequest</span><span class=\"o\">(</span><span class=\"n\">method</span> <span class=\"k\">=</span> <span class=\"nc\">GET</span><span class=\"o\">)</span>\n<span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/abc&quot;</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"nc\">HttpRequest</span><span class=\"o\">(</span><span class=\"n\">method</span> <span class=\"k\">=</span> <span class=\"nc\">GET</span><span class=\"o\">,</span> <span class=\"n\">uri</span> <span class=\"k\">=</span> <span class=\"s\">&quot;/abc&quot;</span><span class=\"o\">)</span>\n\n<span class=\"c1\">// as second argument you can specify an object that is</span>\n<span class=\"c1\">// to be marshalled using the in-scope marshaller for the type</span>\n<span class=\"nc\">Put</span><span class=\"o\">(</span><span class=\"s\">&quot;/abc&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;foobar&quot;</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"nc\">HttpRequest</span><span class=\"o\">(</span><span class=\"n\">method</span> <span class=\"k\">=</span> <span class=\"nc\">PUT</span><span class=\"o\">,</span> <span class=\"n\">uri</span> <span class=\"k\">=</span> <span class=\"s\">&quot;/abc&quot;</span><span class=\"o\">,</span> <span class=\"n\">entity</span> <span class=\"k\">=</span> <span class=\"s\">&quot;foobar&quot;</span><span class=\"o\">)</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">intMarshaller</span> <span class=\"k\">=</span> <span class=\"nc\">Marshaller</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">](</span><span class=\"n\">`application/json`</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">ct</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">marshalTo</span><span class=\"o\">(</span><span class=\"nc\">HttpEntity</span><span class=\"o\">(</span><span class=\"n\">ct</span><span class=\"o\">,</span> <span class=\"s\">&quot;{ value: %s }&quot;</span> <span class=\"n\">format</span> <span class=\"n\">value</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n<span class=\"nc\">Post</span><span class=\"o\">(</span><span class=\"s\">&quot;/int&quot;</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"nc\">HttpRequest</span><span class=\"o\">(</span><span class=\"n\">method</span> <span class=\"k\">=</span> <span class=\"nc\">POST</span><span class=\"o\">,</span> <span class=\"n\">uri</span> <span class=\"k\">=</span> <span class=\"s\">&quot;/int&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">entity</span> <span class=\"k\">=</span> <span class=\"nc\">HttpEntity</span><span class=\"o\">(</span><span class=\"n\">`application/json`</span><span class=\"o\">,</span> <span class=\"s\">&quot;{ value: 42 }&quot;</span><span class=\"o\">))</span>\n\n<span class=\"c1\">// add one or more headers by chaining in the `addHeader` modifier</span>\n<span class=\"nc\">Patch</span><span class=\"o\">(</span><span class=\"s\">&quot;/abc&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;content&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">addHeader</span><span class=\"o\">(</span><span class=\"s\">&quot;X-Yeah&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Naah&quot;</span><span class=\"o\">)</span> <span class=\"o\">===</span> <span class=\"nc\">HttpRequest</span><span class=\"o\">(</span>\n  <span class=\"n\">method</span> <span class=\"k\">=</span> <span class=\"nc\">PATCH</span><span class=\"o\">,</span>\n  <span class=\"n\">uri</span> <span class=\"k\">=</span> <span class=\"s\">&quot;/abc&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">entity</span> <span class=\"k\">=</span> <span class=\"s\">&quot;content&quot;</span><span class=\"o\">,</span>\n  <span class=\"n\">headers</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"nc\">RawHeader</span><span class=\"o\">(</span><span class=\"s\">&quot;X-Yeah&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Naah&quot;</span><span class=\"o\">))</span>\n<span class=\"o\">)</span>\n</pre></div>\n</div>\n</div>\n", "display_toc": false, "title": "Request Building", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-httpx/request-building", "next": {"link": "../response-transformation/", "title": "Response Transformation"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-httpx/response-transformation", "Response Transformation", "N", "next"], ["documentation/spray-httpx/de-compression", "(De)compression", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-httpx"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Request Building</a></li>\n</ul>\n", "prev": {"link": "../de-compression/", "title": "(De)compression"}, "metatags": ""}