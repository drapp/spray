{"body": "<div class=\"section\" id=\"produce\">\n<span id=\"id1\"></span><h1>produce</h1>\n<p>Uses the marshaller for a given type to produce a completion function that is passed to its\ninner route.  You can use it to decouple marshaller resolution from request completion.</p>\n<div class=\"section\" id=\"signature\">\n<h2>Signature</h2>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">produce</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">marshaller</span><span class=\"k\">:</span> <span class=\"kt\">ToResponseMarshaller</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Directive</span><span class=\"o\">[(</span><span class=\"kt\">T</span> <span class=\"k\">\u21d2</span> <span class=\"kt\">Unit</span><span class=\"o\">)</span> <span class=\"kt\">::</span> <span class=\"kt\">HNil</span><span class=\"o\">]</span> \n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"description\">\n<h2>Description</h2>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">produce</span></tt> directive works in conjuction with <tt class=\"docutils literal\"><span class=\"pre\">instanceOf</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">spray.httpx.marshalling</span></tt>\nto convert higher-level (object) structure into some lower-level serialized &#8220;wire format&#8221;.\n<a class=\"reference internal\" href=\"../../../spray-httpx/marshalling/#marshalling\"><em>The marshalling documentation</em></a> explains this process in detail.\nThis directive simplifies exposing types to clients via a route while providing some\nform of access to the current context.</p>\n<p><tt class=\"docutils literal\"><span class=\"pre\">produce</span></tt> is similar to <tt class=\"docutils literal\"><span class=\"pre\">handleWith</span></tt>.  The main difference is with <tt class=\"docutils literal\"><span class=\"pre\">produce</span></tt> you must eventually call the completion function generated by produce.  <tt class=\"docutils literal\"><span class=\"pre\">handleWith</span></tt> will automatically call\n<tt class=\"docutils literal\"><span class=\"pre\">complete</span></tt> when the <tt class=\"docutils literal\"><span class=\"pre\">handleWith</span></tt> function returns.</p>\n</div>\n<div class=\"section\" id=\"examples\">\n<h2>Examples</h2>\n<p>The following example uses <tt class=\"docutils literal\"><span class=\"pre\">spray-json</span></tt> to marshall a simple <tt class=\"docutils literal\"><span class=\"pre\">Person</span></tt> class to a json\nresponse.  It utilizes <tt class=\"docutils literal\"><span class=\"pre\">SprayJsonSupport</span></tt> via the <tt class=\"docutils literal\"><span class=\"pre\">PersonJsonSupport</span></tt> object as the in-scope\nunmarshaller.</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">object</span> <span class=\"nc\">PersonJsonSupport</span> <span class=\"k\">extends</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"k\">with</span> <span class=\"nc\">SprayJsonSupport</span> <span class=\"o\">{</span>\n   <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">PortofolioFormats</span> <span class=\"k\">=</span> <span class=\"n\">jsonFormat2</span><span class=\"o\">(</span><span class=\"nc\">Person</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">favoriteNumber</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>The <tt class=\"docutils literal\"><span class=\"pre\">findPerson</span></tt> takes an argument of type <tt class=\"docutils literal\"><span class=\"pre\">Person</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">Unit</span></tt> which is generated by the <tt class=\"docutils literal\"><span class=\"pre\">produce</span></tt>\ncall.  We can handle any logic we want in <tt class=\"docutils literal\"><span class=\"pre\">findPerson</span></tt> and call our completion function to\ncomplete the request.</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">PersonJsonSupport._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">findPerson</span> <span class=\"k\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">Person</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Unit</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"o\">{</span>\n\n  <span class=\"c1\">//... some processing logic...</span>\n\n  <span class=\"c1\">//complete the request</span>\n  <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">&quot;Jane&quot;</span><span class=\"o\">,</span> <span class=\"mi\">42</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span> <span class=\"n\">get</span> <span class=\"o\">{</span>\n  <span class=\"n\">produce</span><span class=\"o\">(</span><span class=\"n\">instanceOf</span><span class=\"o\">[</span><span class=\"kt\">Person</span><span class=\"o\">])</span> <span class=\"o\">{</span> <span class=\"n\">completionFunction</span> <span class=\"k\">=&gt;</span> <span class=\"n\">ctx</span> <span class=\"k\">=&gt;</span> <span class=\"n\">findPerson</span><span class=\"o\">(</span><span class=\"n\">completionFunction</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"o\">)</span> <span class=\"o\">~&gt;</span> <span class=\"n\">route</span> <span class=\"o\">~&gt;</span> <span class=\"n\">check</span> <span class=\"o\">{</span>\n  <span class=\"n\">mediaType</span> <span class=\"o\">===</span> <span class=\"n\">`application/json`</span>\n  <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"n\">must</span> <span class=\"n\">contain</span><span class=\"o\">(</span><span class=\"s\">&quot;&quot;&quot;&quot;name&quot;: &quot;Jane&quot;&quot;&quot;&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">responseAs</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"n\">must</span> <span class=\"n\">contain</span><span class=\"o\">(</span><span class=\"s\">&quot;&quot;&quot;&quot;favoriteNumber&quot;: 42&quot;&quot;&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "produce", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/marshalling-directives/produce", "next": {"link": "../handleWith/", "title": "handleWith"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/marshalling-directives/handleWith", "handleWith", "N", "next"], ["documentation/spray-routing/marshalling-directives/entity", "entity", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../../predefined-directives-by-trait/", "title": "Predefined Directives (by trait)"}, {"link": "../", "title": "Marshalling Directives"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">produce</a><ul>\n<li><a class=\"reference internal\" href=\"#signature\">Signature</a></li>\n<li><a class=\"reference internal\" href=\"#description\">Description</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../entity/", "title": "entity"}, "metatags": ""}