{"body": "<div class=\"section\" id=\"marshalling\">\n<span id=\"id1\"></span><h1>Marshalling</h1>\n<p>&#8220;Marshalling&#8221; is the process of converting a higher-level (object) structure into some kind of lower-level\nrepresentation, often a &#8220;wire format&#8221;. Other popular names for it are &#8220;Serialization&#8221; or &#8220;Pickling&#8221;.</p>\n<p>In <em>spray</em> &#8220;Marshalling&#8221; means the conversion of an object of type <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt> into an <tt class=\"docutils literal\"><span class=\"pre\">HttpEntity</span></tt>, which forms the\n&#8220;entity body&#8221; of an HTTP request or response (depending on whether used on the client or server side).</p>\n<p>Marshalling for instances of type <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt> is performed by a <tt class=\"docutils literal\"><span class=\"pre\">Marshaller[T]</span></tt>, which is defined like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">trait</span> <span class=\"nc\">Marshaller</span><span class=\"o\">[</span><span class=\"kt\">-T</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">apply</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"k\">:</span> <span class=\"kt\">MarshallingContext</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>So, a <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> is not a plain function <tt class=\"docutils literal\"><span class=\"pre\">T</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">HttpEntity</span></tt>, as might be initially expected. Rather it uses the\ngiven <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-httpx/src/main/scala/spray/httpx/marshalling/MarshallingContext.scala\">MarshallingContext</a> to drive the marshalling process from its own side. There are three reasons\nwhy <em>spray</em> Marshallers are designed in this way:</p>\n<ul class=\"simple\">\n<li>Marshalling on the server-side must support <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Content_negotiation\">content negotiation</a>, which is easier to implement if the marshaller\ndrives the process.</li>\n<li>Marshallers can delay their actions and complete the marshalling process from another thread at another time\n(e.g. when the result of a Future arrives), which is not something that ordinary functions can do. (We could have\nthe Marshaller return a Future, but this would add overhead to the majority of cases that do not require delayed\nexecution.)</li>\n<li>Marshallers can produce more than one response part, whereby the sequence of response chunks is available as a\npull-style stream or from a push-style producer. Both these approaches need to be supported.</li>\n</ul>\n<div class=\"section\" id=\"default-marshallers\">\n<h2>Default Marshallers</h2>\n<p><em>spray-httpx</em> comes with pre-defined Marshallers for the following types:</p>\n<ul class=\"wide simple\">\n<li><a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-httpx/src/main/scala/spray/httpx/marshalling/BasicMarshallers.scala\">BasicMarshallers</a><ul>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Array[Byte]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Array[Char]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">String</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">NodeSeq</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Throwable</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.FormData</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.HttpEntity</span></tt></li>\n</ul>\n</li>\n<li><a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-httpx/src/main/scala/spray/httpx/marshalling/MetaMarshallers.scala\">MetaMarshallers</a><ul>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Option[T]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Either[A,</span> <span class=\"pre\">B]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Try[T]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Future[T]</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">Stream[T]</span></tt></li>\n</ul>\n</li>\n<li><a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-httpx/src/main/scala/spray/httpx/marshalling/MultipartMarshallers.scala\">MultipartMarshallers</a><ul>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.MultipartContent</span></tt></li>\n<li><tt class=\"docutils literal\"><span class=\"pre\">spray.http.MultipartFormData</span></tt></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"implicit-resolution\">\n<h2>Implicit Resolution</h2>\n<p>Since the marshalling infrastructure uses a <a class=\"reference external\" href=\"http://stackoverflow.com/questions/5408861/what-are-type-classes-in-scala-useful-for\">type class</a> based approach <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> instances for a type <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt> have\nto be available implicitly. The implicits for all the default Marshallers defined by <em>spray-httpx</em> are provided\nthrough the companion object of the <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> trait. This means that they are always available and never need to\nbe explicitly imported. Additionally, you can simply &#8220;override&#8221; them by bringing your own custom version into local\nscope.</p>\n</div>\n<div class=\"section\" id=\"custom-marshallers\">\n<h2>Custom Marshallers</h2>\n<p><em>spray-httpx</em> gives you a few convenience tools for constructing Marshallers for your own types.\nOne is the <tt class=\"docutils literal\"><span class=\"pre\">Marshaller.of</span></tt> helper, which is defined as such:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">of</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">](</span><span class=\"n\">marshalTo</span><span class=\"k\">:</span> <span class=\"kt\">ContentType*</span><span class=\"o\">)</span>\n         <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"o\">(</span><span class=\"kt\">T</span><span class=\"o\">,</span> <span class=\"kt\">ContentType</span><span class=\"o\">,</span> <span class=\"nc\">MarshallingContext</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span> <span class=\"nc\">Unit</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Marshaller</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>The default <tt class=\"docutils literal\"><span class=\"pre\">StringMarshaller</span></tt> for example is defined with it:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"c1\">// prefer UTF-8 encoding, but also render with other encodings if the client requests them</span>\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">StringMarshaller</span> <span class=\"k\">=</span> <span class=\"n\">stringMarshaller</span><span class=\"o\">(</span><span class=\"nc\">ContentTypes</span><span class=\"o\">.</span><span class=\"n\">`text/plain(UTF-8)`</span><span class=\"o\">,</span> <span class=\"nc\">ContentTypes</span><span class=\"o\">.</span><span class=\"n\">`text/plain`</span><span class=\"o\">)</span>\n\n<span class=\"k\">def</span> <span class=\"n\">stringMarshaller</span><span class=\"o\">(</span><span class=\"n\">contentType</span><span class=\"k\">:</span> <span class=\"kt\">ContentType</span><span class=\"o\">,</span> <span class=\"n\">more</span><span class=\"k\">:</span> <span class=\"kt\">ContentType*</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Marshaller</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"nc\">Marshaller</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"o\">[</span><span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"n\">contentType</span> <span class=\"o\">+:</span> <span class=\"n\">more</span><span class=\"k\">:</span> <span class=\"k\">_</span><span class=\"kt\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">contentType</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"k\">\u21d2</span>\n    <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">marshalTo</span><span class=\"o\">(</span><span class=\"nc\">HttpEntity</span><span class=\"o\">(</span><span class=\"n\">contentType</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">))</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>As another example, here is a <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> definition for a custom type <tt class=\"docutils literal\"><span class=\"pre\">Person</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.httpx.marshalling._</span>\n\n<span class=\"k\">val</span> <span class=\"n\">`application/vnd.acme.person`</span> <span class=\"k\">=</span>\n  <span class=\"nc\">MediaTypes</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"o\">(</span><span class=\"nc\">MediaType</span><span class=\"o\">.</span><span class=\"n\">custom</span><span class=\"o\">(</span><span class=\"s\">&quot;application/vnd.acme.person&quot;</span><span class=\"o\">))</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">firstName</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">Person</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">PersonMarshaller</span> <span class=\"k\">=</span>\n    <span class=\"nc\">Marshaller</span><span class=\"o\">.</span><span class=\"n\">of</span><span class=\"o\">[</span><span class=\"kt\">Person</span><span class=\"o\">](</span><span class=\"n\">`application/vnd.acme.person`</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">contentType</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n      <span class=\"k\">val</span> <span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"o\">)</span> <span class=\"k\">=</span> <span class=\"n\">value</span>\n      <span class=\"k\">val</span> <span class=\"n\">string</span> <span class=\"k\">=</span> <span class=\"s\">&quot;Person: %s, %s, %s&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">age</span><span class=\"o\">)</span>\n      <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">marshalTo</span><span class=\"o\">(</span><span class=\"nc\">HttpEntity</span><span class=\"o\">(</span><span class=\"n\">contentType</span><span class=\"o\">,</span> <span class=\"n\">string</span><span class=\"o\">))</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">marshal</span><span class=\"o\">(</span><span class=\"nc\">Person</span><span class=\"o\">(</span><span class=\"s\">&quot;Bob&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;Parr&quot;</span><span class=\"o\">,</span> <span class=\"mi\">32</span><span class=\"o\">))</span> <span class=\"o\">===</span>\n  <span class=\"nc\">Right</span><span class=\"o\">(</span><span class=\"nc\">HttpEntity</span><span class=\"o\">(</span><span class=\"n\">`application/vnd.acme.person`</span><span class=\"o\">,</span> <span class=\"s\">&quot;Person: Bob, Parr, 32&quot;</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>As can be seen in this example you best define the <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> for <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt> in the companion object of <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt>.\nThis way your marshaller is always in-scope, without any <a class=\"reference external\" href=\"http://eed3si9n.com/revisiting-implicits-without-import-tax\">import tax</a>.</p>\n</div>\n<div class=\"section\" id=\"deriving-marshallers\">\n<h2>Deriving Marshallers</h2>\n<p>Sometimes you can save yourself some work by reusing existing Marshallers for your custom ones.\nThe idea is to &#8220;wrap&#8221; an existing <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> with come logic to &#8220;re-target&#8221; it to your type.</p>\n<p>In this regard wrapping a <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> can mean one or both of the following two things:</p>\n<ul class=\"simple\">\n<li>Transform the input before it reaches the wrapped Marshaller</li>\n<li>Transform the output of the wrapped Marshaller</li>\n</ul>\n<p>You can do both, but the existing support infrastructure favors the first over the second.\nThe <tt class=\"docutils literal\"><span class=\"pre\">Marshaller.delegate</span></tt> helper allows you to turn a <tt class=\"docutils literal\"><span class=\"pre\">Marshaller[B]</span></tt> into a <tt class=\"docutils literal\"><span class=\"pre\">Marshaller[A]</span></tt>\nby providing a function <tt class=\"docutils literal\"><span class=\"pre\">A</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">B</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">delegate</span><span class=\"o\">[</span><span class=\"kt\">A</span>, <span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">marshalTo</span><span class=\"k\">:</span> <span class=\"kt\">ContentType*</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"k\">:</span> <span class=\"kt\">A</span> <span class=\"o\">=&gt;</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"k\">implicit</span> <span class=\"n\">mb</span><span class=\"k\">:</span> <span class=\"kt\">Marshaller</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">Marshaller</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n</pre></div>\n</div>\n<p>This is used, for example, by the <tt class=\"docutils literal\"><span class=\"pre\">NodeSeqMarshaller</span></tt>, which delegates to the <tt class=\"docutils literal\"><span class=\"pre\">StringMarshaller</span></tt> like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"nc\">NodeSeqMarshaller</span> <span class=\"k\">=</span>\n  <span class=\"nc\">Marshaller</span><span class=\"o\">.</span><span class=\"n\">delegate</span><span class=\"o\">[</span><span class=\"kt\">NodeSeq</span>, <span class=\"kt\">String</span><span class=\"o\">](</span><span class=\"n\">`text/xml`</span><span class=\"o\">,</span> <span class=\"n\">`application/xml`</span><span class=\"o\">,</span>\n    <span class=\"n\">`text/html`</span><span class=\"o\">,</span> <span class=\"n\">`application/xhtml+xml`</span><span class=\"o\">)(</span><span class=\"k\">_</span><span class=\"o\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>There is also a second overload of the <tt class=\"docutils literal\"><span class=\"pre\">delegate</span></tt> helper that takes a function <tt class=\"docutils literal\"><span class=\"pre\">(A,</span> <span class=\"pre\">ContentType)</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">B</span></tt> rather than\na function <tt class=\"docutils literal\"><span class=\"pre\">A</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">B</span></tt>. It&#8217;s helpful if your input conversion requires access to the <tt class=\"docutils literal\"><span class=\"pre\">ContentType</span></tt> that is\nmarshalled to.</p>\n<p>If you want the second wrapping type, transformation of the output, things are a bit harder (and less efficient),\nsince Marshallers produce HttpEntities rather than Strings. An <tt class=\"docutils literal\"><span class=\"pre\">HttpEntity</span></tt> contains the <em>serialized</em> result, which is\nessentially an <tt class=\"docutils literal\"><span class=\"pre\">Array[Byte]</span></tt> and a <tt class=\"docutils literal\"><span class=\"pre\">ContentType</span></tt>.\nSo, for example, prepending a string to the output of the underlying <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> would entail deserializing the bytes\ninto a string, prepending your prefix and reserializing into a byte array.... not pretty and quite inefficient.\nNevertheless, you can do it. Just produce a custom <tt class=\"docutils literal\"><span class=\"pre\">MarshallingContext</span></tt>, which wraps the original one\nwith custom logic, and pass it to the inner <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt>. However, a general solution would also require you to\nthink about the handling of chunked responses, errors, etc.</p>\n<p>Because the second form of wrapping is less attractive there is no real helper infrastructure for it.\nWe generally do not want to encourage such type of design. (With one exception: Simply overriding the Content-Type of\nanother <tt class=\"docutils literal\"><span class=\"pre\">Marshaller</span></tt> can be done efficiently. This is why the <tt class=\"docutils literal\"><span class=\"pre\">MarshallingContext</span></tt> already comes with a\n<tt class=\"docutils literal\"><span class=\"pre\">withContentTypeOverriding</span></tt> copy helper.)</p>\n</div>\n<div class=\"section\" id=\"toresponsemarshaller\">\n<h2>ToResponseMarshaller</h2>\n<p>The plain <tt class=\"docutils literal\"><span class=\"pre\">Marshaller[T]</span></tt> is agnostic to whether it is used on the server- or on the client-side. This means that\nit can be used to produce the entities (and additional headers) for responses as well as requests.</p>\n<p>Sometimes, however, this is not enough. If you know that you need to only marshal to <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> instances (e.g.\nbecause you only use <em>spray</em> on the server-side) you can also write a <tt class=\"docutils literal\"><span class=\"pre\">ToResponseMarshaller[T]</span></tt> for your type.\nThis more specialized marshaller allows you to produce the complete <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt> instance rather than only its\nentity. As such the marshaller can also set the status code of the response (which doesn&#8217;t exist on the request side).</p>\n<p>When looking for a way to marshal a custom type <tt class=\"docutils literal\"><span class=\"pre\">T</span></tt> <em>spray</em> (or rather the Scala compiler) first looks for a\n<tt class=\"docutils literal\"><span class=\"pre\">ToResponseMarshaller[T]</span></tt> for the type. Only if none is found will an in-scope <tt class=\"docutils literal\"><span class=\"pre\">Marshaller[T]</span></tt> be used.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Marshalling", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-httpx/marshalling", "next": {"link": "../unmarshalling/", "title": "Unmarshalling"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-httpx/unmarshalling", "Unmarshalling", "N", "next"], ["documentation/spray-httpx/installation", "Installation", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-httpx"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Marshalling</a><ul>\n<li><a class=\"reference internal\" href=\"#default-marshallers\">Default Marshallers</a></li>\n<li><a class=\"reference internal\" href=\"#implicit-resolution\">Implicit Resolution</a></li>\n<li><a class=\"reference internal\" href=\"#custom-marshallers\">Custom Marshallers</a></li>\n<li><a class=\"reference internal\" href=\"#deriving-marshallers\">Deriving Marshallers</a></li>\n<li><a class=\"reference internal\" href=\"#toresponsemarshaller\">ToResponseMarshaller</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../installation/", "title": "Installation"}, "metatags": ""}