{"body": "<div class=\"section\" id=\"de-compression\">\n<h1>(De)compression</h1>\n<p>The <a class=\"reference external\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616.html\">HTTP spec</a> defines a <tt class=\"docutils literal\"><span class=\"pre\">Content-Encoding</span></tt> header, which signifies whether the entity body of an HTTP message is\n&#8220;encoded&#8221; and, if so, by which algorithm. The only commonly used content encodings, apart from <tt class=\"docutils literal\"><span class=\"pre\">identity</span></tt> (i.e. plain\ntext), are compression algorithms.</p>\n<p>Currently <em>spray</em> supports the compression and decompression of HTTP requests and responses with the <tt class=\"docutils literal\"><span class=\"pre\">gzip</span></tt> or\n<tt class=\"docutils literal\"><span class=\"pre\">deflate</span></tt> encodings. The core logic for this, which is shared by the <a class=\"reference internal\" href=\"../../spray-client/#spray-client\"><em>spray-client</em></a> and <a class=\"reference internal\" href=\"../../spray-routing/#spray-routing\"><em>spray-routing</em></a>\nmodules for the client- and server-side (respectively), lives in the <a class=\"reference external\" href=\"https://github.com/spray/spray/tree/release/1.2/spray-httpx/src/main/scala/spray/httpx/encoding\">spray.httpx.encoding</a> package.</p>\n<div class=\"section\" id=\"compression-of-chunk-streams\">\n<h2>Compression of Chunk Streams</h2>\n<p>Properly combining HTTP compression with the <tt class=\"docutils literal\"><span class=\"pre\">chunked</span></tt> HTTP/1.1 Transfer-Encoding can be a little tricky.\nFor optimal results the peer sending the message (i.e. the client or the server) should use a single compression context\nacross all chunks, so that common patterns shared by several chunks contribute to a high compression ratio.\nAt the same time the decompressor at the other end must be able to properly decompress each chunk as it arrives.</p>\n<p>In order to achieve this the compressor must properly flush its compression stream after each chunk, something that\nthe GZIP- and DeflaterOutputStream implementations of the Java 6 JDK unfortunately do not support correctly\n(see <a class=\"reference external\" href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4813885\">this JDK bug</a>, fixed only in Java 7). <em>sprays</em> compression implementation jumps through a few hoops to achieve\nthe desired behavior also under Java 6, with no cost to you as the user.</p>\n</div>\n</div>\n", "display_toc": true, "title": "(De)compression", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-httpx/de-compression", "next": {"link": "../request-building/", "title": "Request Building"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-httpx/request-building", "Request Building", "N", "next"], ["documentation/spray-httpx/unmarshalling", "Unmarshalling", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-httpx"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">(De)compression</a><ul>\n<li><a class=\"reference internal\" href=\"#compression-of-chunk-streams\">Compression of Chunk Streams</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../unmarshalling/", "title": "Unmarshalling"}, "metatags": ""}