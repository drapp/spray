{"body": "<div class=\"section\" id=\"big-picture\">\n<h1>Big Picture</h1>\n<p>The <em>spray-can</em> <a class=\"reference internal\" href=\"../../../spray-can/http-server/#http-server\"><em>HTTP Server</em></a> and the <a class=\"reference internal\" href=\"../../../spray-servlet/#spray-servlet\"><em>spray-servlet</em></a> connector servlet both provide an actor-level interface\nthat allows your application to respond to incoming HTTP requests by simply replying with an <tt class=\"docutils literal\"><span class=\"pre\">HttpResponse</span></tt>:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">HttpMethods._</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyHttpService</span> <span class=\"k\">extends</span> <span class=\"nc\">Actor</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"o\">{</span>\n    <span class=\"k\">case</span> <span class=\"nc\">HttpRequest</span><span class=\"o\">(</span><span class=\"nc\">GET</span><span class=\"o\">,</span> <span class=\"nc\">Uri</span><span class=\"o\">.</span><span class=\"nc\">Path</span><span class=\"o\">(</span><span class=\"s\">&quot;/ping&quot;</span><span class=\"o\">),</span> <span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">sender</span> <span class=\"o\">!</span> <span class=\"nc\">HttpResponse</span><span class=\"o\">(</span><span class=\"n\">entity</span> <span class=\"k\">=</span> <span class=\"s\">&quot;PONG&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>While it&#8217;d be perfectly possible to define a complete REST API service purely by pattern-matching against the incoming\n<tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt> (maybe with the help of a few extractors in the way of <a class=\"reference external\" href=\"http://unfiltered.databinder.net/\">Unfiltered</a>) this approach becomes somewhat\nunwieldy for larger services due to the amount of syntax &#8220;ceremony&#8221; required. Also, it doesn&#8217;t help in keeping your\nservice definition as <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/DRY\">DRY</a> as you might like.</p>\n<p>As an alternative <em>spray-routing</em> provides a flexible DSL for expressing your service behavior as a structure of\ncomposable elements (called <a class=\"reference internal\" href=\"../directives/#directives\"><em>Directives</em></a>) in a concise and readable way. At the top-level, as the result of the\n<tt class=\"docutils literal\"><span class=\"pre\">runRoute</span></tt> wrapper, the &#8220;route structure&#8221; produces an <tt class=\"docutils literal\"><span class=\"pre\">Actor.Receive</span></tt> partial function that can be directly supplied\nto your service actor.\nThe service definition from above for example, written using the routing DSL, would look like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.routing._</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyHttpService</span> <span class=\"k\">extends</span> <span class=\"nc\">HttpServiceActor</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"n\">runRoute</span> <span class=\"o\">{</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;ping&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">get</span> <span class=\"o\">{</span>\n        <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;PONG&quot;</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>This very short example is certainly not the best for illustrating the savings in &#8220;ceremony&#8221; and improvements in\nconciseness and readability that <em>spray-routing</em> promises. The <a class=\"reference internal\" href=\"../../#longer-example\"><em>Longer Example</em></a> might do a better job in this\nregard.</p>\n<p>For learning how to work with the <em>spray-routing</em> DSL you should first understand the concept of <a class=\"reference internal\" href=\"../routes/#routes\"><em>Routes</em></a>.</p>\n<div class=\"section\" id=\"the-httpservice\">\n<span id=\"httpservice\"></span><h2>The <em>HttpService</em></h2>\n<p><em>spray-routing</em> makes all relevant parts of the routing DSL available through the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-routing/src/main/scala/spray/routing/HttpService.scala\">HttpService</a> trait, which you can\nmix into your service actor or route test. The <tt class=\"docutils literal\"><span class=\"pre\">HttpService</span></tt> trait defines only one abstract member:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">actorRefFactory</span><span class=\"k\">:</span> <span class=\"kt\">ActorRefFactory</span>\n</pre></div>\n</div>\n<p>which connects the routing DSL to your actor hierarchy. In order to have access to all <tt class=\"docutils literal\"><span class=\"pre\">HttpService</span></tt> members in your\nservice actor you can either mix in the <tt class=\"docutils literal\"><span class=\"pre\">HttpService</span></tt> trait and add this line to your actor class:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"n\">actorRefFactory</span> <span class=\"k\">=</span> <span class=\"n\">context</span>\n</pre></div>\n</div>\n<p>or, alternatively, derive your service actor from <tt class=\"docutils literal\"><span class=\"pre\">HttpServiceActor</span></tt> clas, which already defines the connecting\n<tt class=\"docutils literal\"><span class=\"pre\">def</span> <span class=\"pre\">actorRefFactory</span> <span class=\"pre\">=</span> <span class=\"pre\">context</span></tt> for you.</p>\n</div>\n<div class=\"section\" id=\"the-runroute-wrapper\">\n<span id=\"runroute\"></span><h2>The <em>runRoute</em> Wrapper</h2>\n<p>Apart from all the <a class=\"reference internal\" href=\"../../predefined-directives-alphabetically/#predefined-directives\"><em>predefined directives</em></a> the <tt class=\"docutils literal\"><span class=\"pre\">HttpService</span></tt> provides one important\nthing, the <tt class=\"docutils literal\"><span class=\"pre\">runRoute</span></tt> wrapper. This method connects your route structure to the enclosing actor by constructing an\n<tt class=\"docutils literal\"><span class=\"pre\">Actor.Receive</span></tt> partial function that you can directly use as the &#8220;behavior&#8221; function of your actor:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.routing._</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyHttpService</span> <span class=\"k\">extends</span> <span class=\"nc\">HttpServiceActor</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">receive</span> <span class=\"k\">=</span> <span class=\"n\">runRoute</span> <span class=\"o\">{</span>\n    <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;ping&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">get</span> <span class=\"o\">{</span>\n        <span class=\"n\">complete</span><span class=\"o\">(</span><span class=\"s\">&quot;PONG&quot;</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "Big Picture", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/key-concepts/big-picture", "next": {"link": "../routes/", "title": "Routes"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/key-concepts/routes", "Routes", "N", "next"], ["documentation/spray-routing/key-concepts/index", "Key Concepts", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../", "title": "Key Concepts"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Big Picture</a><ul>\n<li><a class=\"reference internal\" href=\"#the-httpservice\">The <em>HttpService</em></a></li>\n<li><a class=\"reference internal\" href=\"#the-runroute-wrapper\">The <em>runRoute</em> Wrapper</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../", "title": "Key Concepts"}, "metatags": ""}