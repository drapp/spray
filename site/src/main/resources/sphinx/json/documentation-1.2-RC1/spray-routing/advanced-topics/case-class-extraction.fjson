{"body": "<div class=\"section\" id=\"case-class-extraction\">\n<span id=\"id1\"></span><h1>Case Class Extraction</h1>\n<p>The value extraction performed by <a class=\"reference internal\" href=\"../../key-concepts/directives/#directives\"><em>Directives</em></a> is a nice way of providing your route logic with interesting request\nproperties, all with proper type-safety and error handling. However, in some case you might want even more.\nConsider this example:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"o\">(</span><span class=\"n\">red</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;color&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">parameters</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;red</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"-Symbol\">&#39;green</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"-Symbol\">&#39;blue</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">red</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"o\">)</span> <span class=\"k\">=&gt;</span>\n      <span class=\"k\">val</span> <span class=\"n\">color</span> <span class=\"k\">=</span> <span class=\"nc\">Color</span><span class=\"o\">(</span><span class=\"n\">red</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"o\">)</span>\n      <span class=\"n\">doSomethingWith</span><span class=\"o\">(</span><span class=\"n\">color</span><span class=\"o\">)</span> <span class=\"c1\">// route working with the Color instance</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Here a <a class=\"reference internal\" href=\"../../parameter-directives/parameters/#parameters\"><em>parameters</em></a> directives is employed to extract three <tt class=\"docutils literal\"><span class=\"pre\">Int</span></tt> values, which are then used to construct an\ninstance of the <tt class=\"docutils literal\"><span class=\"pre\">Color</span></tt> case class. So far so good. However, if the model classes we&#8217;d like to work with have more\nthan just a few parameters the overhead introduced by capturing the arguments as extractions only to feed them into the\nmodel class constructor directly afterwards can somewhat clutter up your route definitions.</p>\n<p>If your model classes are case classes, as in our example, <em>spray-routing</em> supports an even shorter and more concise\nsyntax. You can also write the example above like this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"o\">(</span><span class=\"n\">red</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;color&quot;</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">parameters</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;red</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"-Symbol\">&#39;green</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"-Symbol\">&#39;blue</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">]).</span><span class=\"n\">as</span><span class=\"o\">(</span><span class=\"nc\">Color</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">color</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">doSomethingWith</span><span class=\"o\">(</span><span class=\"n\">color</span><span class=\"o\">)</span> <span class=\"c1\">// route working with the Color instance</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>You can postfix any directive with extractions with an <tt class=\"docutils literal\"><span class=\"pre\">as(...)</span></tt> call. By simply passing the companion object of your\nmodel case class to the <tt class=\"docutils literal\"><span class=\"pre\">as</span></tt> modifier method the underlying directive is transformed into an equivalent one, which\nextracts only one value of the type of your model class. Note that there is no reflection involved and your case class\ndoes not have to implement any special interfaces. The only requirement is that the directive you attach the <tt class=\"docutils literal\"><span class=\"pre\">as</span></tt>\ncall to produces the right number of extractions, with the right types and in the right order.</p>\n<p>If you&#8217;d like to construct a case class instance from extractions produced by <em>several</em> directives you can first join\nthe directives with the <tt class=\"docutils literal\"><span class=\"pre\">&amp;</span></tt> operator before using the <tt class=\"docutils literal\"><span class=\"pre\">as</span></tt> call:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">route</span> <span class=\"k\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">(</span><span class=\"s\">&quot;color&quot;</span> <span class=\"o\">/</span> <span class=\"nc\">Segment</span><span class=\"o\">)</span> <span class=\"o\">&amp;</span>\n    <span class=\"n\">parameters</span><span class=\"o\">(</span><span class=\"-Symbol\">&#39;r</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"-Symbol\">&#39;g</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">],</span> <span class=\"-Symbol\">&#39;b</span><span class=\"o\">.</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])).</span><span class=\"n\">as</span><span class=\"o\">(</span><span class=\"nc\">Color</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">color</span> <span class=\"k\">=&gt;</span>\n      <span class=\"n\">doSomethingWith</span><span class=\"o\">(</span><span class=\"n\">color</span><span class=\"o\">)</span> <span class=\"c1\">// route working with the Color instance</span>\n    <span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>Here the <tt class=\"docutils literal\"><span class=\"pre\">Color</span></tt> class has gotten another member, <tt class=\"docutils literal\"><span class=\"pre\">name</span></tt>, which is supplied not as a parameter but as a path\nelement. By joining the <tt class=\"docutils literal\"><span class=\"pre\">path</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">parameters</span></tt> directives with <cite>&amp;</cite> you create a directive extracting 4 values,\nwhich directly fit the member list of the <tt class=\"docutils literal\"><span class=\"pre\">Color</span></tt> case class. Therefore you can use the <tt class=\"docutils literal\"><span class=\"pre\">as</span></tt> modifier to convert\nthe directive into one extracting only a single <tt class=\"docutils literal\"><span class=\"pre\">Color</span></tt> instance.</p>\n<p>Generally, when you have routes that work with, say, more than 3 extractions it&#8217;s a good idea to introduce a case class\nfor these and resort to case class extraction. Especially since it supports another nice feature: validation.</p>\n<div class=\"section\" id=\"case-class-validation\">\n<h2>Case Class Validation</h2>\n<p>In many cases your web service needs to verify input parameters according to some logic before actually working with\nthem. E.g. in the example above the restriction might be that all color component values must be between 0 and 255.\nYou could get this done with a few <a class=\"reference internal\" href=\"../../misc-directives/validate/#validate\"><em>validate</em></a> directives but this would quickly become cumbersome and hard to\nread.</p>\n<p>If you use case class extraction you can put the verification logic into the constructor of your case class, where it\nshould be:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"k\">:</span> <span class=\"kt\">String</span><span class=\"o\">,</span> <span class=\"n\">red</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">green</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">blue</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"n\">require</span><span class=\"o\">(!</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span><span class=\"o\">,</span> <span class=\"s\">&quot;color name must not be empty&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">require</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">red</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">red</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">255</span><span class=\"o\">,</span> <span class=\"s\">&quot;red color component must be between 0 and 255&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">require</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">green</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">green</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">255</span><span class=\"o\">,</span> <span class=\"s\">&quot;green color component must be between 0 and 255&quot;</span><span class=\"o\">)</span>\n  <span class=\"n\">require</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">blue</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">blue</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">255</span><span class=\"o\">,</span> <span class=\"s\">&quot;blue color component must be between 0 and 255&quot;</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n<p>If you write your validations like this <em>spray-routings</em> case class extraction logic will properly pick up all error\nmessages and generate a <tt class=\"docutils literal\"><span class=\"pre\">ValidationRejection</span></tt> if something goes wrong. By default, <tt class=\"docutils literal\"><span class=\"pre\">ValidationRejections</span></tt> are\nconverted into <tt class=\"docutils literal\"><span class=\"pre\">400</span> <span class=\"pre\">Bad</span> <span class=\"pre\">Request</span></tt> error response by the default <a class=\"reference internal\" href=\"../../key-concepts/rejections/#rejectionhandler\"><em>RejectionHandler</em></a>, if no subsequent route\nsuccessfully handles the request.</p>\n<div class=\"admonition caution\">\n<p class=\"first admonition-title\">Caution</p>\n<p class=\"last\">There is one quirk to look out for when using case class extraction: If you create an explicit companion\nobject for your case class, no matter whether you actually add any members to it or not, the syntax presented above\nwill not (quite) work anymore. Instead of <tt class=\"docutils literal\"><span class=\"pre\">as(Color)</span></tt> you will then have to say <tt class=\"docutils literal\"><span class=\"pre\">as(Color.apply)</span></tt>. This behavior\nappears as if it&#8217;s not really intended, we will try to work with the TypeSafe team to fix this.</p>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "Case Class Extraction", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-routing/advanced-topics/case-class-extraction", "next": {"link": "../custom-directives/", "title": "Custom Directives"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-routing/advanced-topics/custom-directives", "Custom Directives", "N", "next"], ["documentation/spray-routing/advanced-topics/understanding-dsl-structure", "Understanding the DSL Structure", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-routing"}, {"link": "../", "title": "Advanced Topics"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Case Class Extraction</a><ul>\n<li><a class=\"reference internal\" href=\"#case-class-validation\">Case Class Validation</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../understanding-dsl-structure/", "title": "Understanding the DSL Structure"}, "metatags": ""}