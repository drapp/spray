{"body": "<div class=\"section\" id=\"host-level-api\">\n<span id=\"hostlevelapi\"></span><h1>Host-level API</h1>\n<p>As opposed to the <a class=\"reference internal\" href=\"../connection-level/#connectionlevelapi\"><em>Connection-level API</em></a> the host-level API relieves you from manually opening and closing each\nindividual HTTP connection. It autonomously manages a configurable pool of connections to <em>one particular server</em>.</p>\n<div class=\"section\" id=\"starting-an-httphostconnector\">\n<h2>Starting an HttpHostConnector</h2>\n<p>The core of this API is the <tt class=\"docutils literal\"><span class=\"pre\">HttpHostConnector</span></tt> actor, whose class, as with all other <em>spray-can</em> actors, you don&#8217;t\nget in direct contact with from your application. All communication happens purely via actor messages, the majority of\nwhich are defined in the <a class=\"reference external\" href=\"https://github.com/spray/spray/blob/release/1.2/spray-can/src/main/scala/spray/can/Http.scala#L29\">spray.can.Http</a> object.</p>\n<p>You ask <em>spray-can</em> to start a new <tt class=\"docutils literal\"><span class=\"pre\">HttpHostConnector</span></tt> for a given host by sending an <tt class=\"docutils literal\"><span class=\"pre\">Http.HostConnectorSetup</span></tt>\nmessage to the <tt class=\"docutils literal\"><span class=\"pre\">Http</span></tt> extension as such:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"nc\">IO</span><span class=\"o\">(</span><span class=\"nc\">Http</span><span class=\"o\">)</span> <span class=\"o\">!</span> <span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"nc\">HostConnectorSetup</span><span class=\"o\">(</span><span class=\"s\">&quot;www.spray.io&quot;</span><span class=\"o\">,</span> <span class=\"n\">port</span> <span class=\"k\">=</span> <span class=\"mi\">80</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>Apart from the host name and port the <tt class=\"docutils literal\"><span class=\"pre\">Http.HostConnectorSetup</span></tt> message also allows you to specify socket options and\na larger number of configuration settings for the connector and the connections it is to manage.</p>\n<p>If there is no connector actor running for the given combination of hostname, port and settings <em>spray-can</em> will start\na new one, otherwise the existing one is going to be re-used.\nThe connector will then respond with an <tt class=\"docutils literal\"><span class=\"pre\">Http.HostConnectorInfo</span></tt> event message, which repeats the connectors\n<tt class=\"docutils literal\"><span class=\"pre\">ActorRef</span></tt> and setup command (for easy matching against the result of an &#8220;ask&#8221;).</p>\n</div>\n<div class=\"section\" id=\"using-an-httphostconnector\">\n<h2>Using an HttpHostConnector</h2>\n<p>Once you&#8217;ve got a hold of the connectors <tt class=\"docutils literal\"><span class=\"pre\">ActorRef</span></tt> you can send it one or more <em>spray-http</em> <tt class=\"docutils literal\"><span class=\"pre\">HttpRequestPart</span></tt>\nmessages. The connector will send the request across one of the connections it manages according to the following logic:</p>\n<ul class=\"simple\">\n<li>if <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/HTTP_pipelining\">HTTP pipelining</a> is not enabled (the default) the request is<ul>\n<li>dispatched to the first idle connection in the pool if there is one</li>\n<li>dispatched to a newly opened connection if there is no idle one and less than the configured <tt class=\"docutils literal\"><span class=\"pre\">max-connections</span></tt>\nhave been opened so far</li>\n<li>queued and sent across the first connection that becomes available (i.e. either idle or unconnected) if all\navailable connections are currently busy with open requests</li>\n</ul>\n</li>\n<li>if <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/HTTP_pipelining\">HTTP pipelining</a> is enabled the request is dispatched to<ul>\n<li>the first idle connection in the pool if there is one</li>\n<li>a newly opened connection if there is no idle one and less than the configured <tt class=\"docutils literal\"><span class=\"pre\">max-connections</span></tt>\nhave been opened so far</li>\n<li>the connection with the least open requests if all connections already have requests open</li>\n</ul>\n</li>\n</ul>\n<p>As soon as a response for a request has been received it is dispatched as a <tt class=\"docutils literal\"><span class=\"pre\">HttpResponsePart</span></tt>\ninstance to the sender of the respective request. If the server indicated that it doesn&#8217;t want to reuse the connection\nfor other requests (either via a <tt class=\"docutils literal\"><span class=\"pre\">Connection:</span> <span class=\"pre\">close</span></tt> header on an <tt class=\"docutils literal\"><span class=\"pre\">HTTP/1.1</span></tt> response or a missing\n<tt class=\"docutils literal\"><span class=\"pre\">Connection:</span> <span class=\"pre\">Keep-Alive</span></tt> header on an <tt class=\"docutils literal\"><span class=\"pre\">HTTP/1.0</span></tt> response) the connector actor closes the connection after receipt\nof the response thereby freeing up the &#8220;slot&#8221; for a new connection.</p>\n</div>\n<div class=\"section\" id=\"retrying-a-request\">\n<h2>Retrying a Request</h2>\n<p>If the <tt class=\"docutils literal\"><span class=\"pre\">max-retries</span></tt> connector config setting is greater than zero the connector retries idempotent requests for which\na response could not be successfully retrieved. Idempotent requests are those whose HTTP method is defined to be\nidempotent by the HTTP spec, which are all the ones currently modelled by <em>spray-http</em> except for the <tt class=\"docutils literal\"><span class=\"pre\">PATCH</span></tt> and\n<tt class=\"docutils literal\"><span class=\"pre\">POST</span></tt> methods.</p>\n<p>When a response could not be received for a certain request there are essentially three possible error scenarios:</p>\n<ol class=\"arabic simple\">\n<li>The request got lost on the way to the server.</li>\n<li>The server experiences a problem while processing the request.</li>\n<li>The response from the server got lost on the way back.</li>\n</ol>\n<p>Since the host connector cannot know which one of these possible reasons caused the problem and therefore <tt class=\"docutils literal\"><span class=\"pre\">PATCH</span></tt> and\n<tt class=\"docutils literal\"><span class=\"pre\">POST</span></tt> requests could have already triggered a non-idempotent action on the server these requests cannot be retried.</p>\n<p>In these cases, as well as when all retries have not yielded a proper response, the connector dispatches a\n<tt class=\"docutils literal\"><span class=\"pre\">Status.Failure</span></tt> message with a <tt class=\"docutils literal\"><span class=\"pre\">RuntimeException</span></tt> holding a respective error message to the sender of the request.</p>\n</div>\n<div class=\"section\" id=\"connector-shutdown\">\n<h2>Connector Shutdown</h2>\n<p>The connector config contains an <tt class=\"docutils literal\"><span class=\"pre\">idle-timeout</span></tt> setting which specifies the time period after which an idle connector,\ni.e. one without any open connections, will automatically shut itself down. Since, by default, the connections in the\nconnectors connection pool also have an idle-timeout active an unused connector will eventually be cleaned up completely\nif left unused.</p>\n<p>However, in order to speed up the shutdown a host connector can be sent an <tt class=\"docutils literal\"><span class=\"pre\">Http.CloseAll</span></tt> command, which\ntriggers an explicit closing of all connections. After all connections have been properly closed the connector will\ndispatch an <tt class=\"docutils literal\"><span class=\"pre\">Http.ClosedAll</span></tt> event message to all senders of <tt class=\"docutils literal\"><span class=\"pre\">Http.CloseAll</span></tt> messages before stopping itself.</p>\n<p>A subsequent sending of an identical <tt class=\"docutils literal\"><span class=\"pre\">Http.HostConnectorSetup</span></tt> command to the <tt class=\"docutils literal\"><span class=\"pre\">Http</span></tt> extension will then trigger the\ncreation of a fresh connector instance.</p>\n</div>\n</div>\n", "display_toc": true, "title": "Host-level API", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-can/http-client/host-level", "next": {"link": "../request-level/", "title": "Request-level API"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-can/http-client/request-level", "Request-level API", "N", "next"], ["documentation/spray-can/http-client/connection-level", "Connection-level API", "P", "previous"]], "meta": {}, "parents": [{"link": "../../../", "title": "Documentation"}, {"link": "../../", "title": "spray-can"}, {"link": "../", "title": "HTTP Client APIs"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Host-level API</a><ul>\n<li><a class=\"reference internal\" href=\"#starting-an-httphostconnector\">Starting an HttpHostConnector</a></li>\n<li><a class=\"reference internal\" href=\"#using-an-httphostconnector\">Using an HttpHostConnector</a></li>\n<li><a class=\"reference internal\" href=\"#retrying-a-request\">Retrying a Request</a></li>\n<li><a class=\"reference internal\" href=\"#connector-shutdown\">Connector Shutdown</a></li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../connection-level/", "title": "Connection-level API"}, "metatags": ""}