{"body": "<div class=\"section\" id=\"spray-client\">\n<span id=\"id1\"></span><h1>spray-client</h1>\n<p><em>spray-client</em> provides high-level HTTP client functionality by adding another logic layer on top of the relatively\nbasic <em>spray-can</em> <a class=\"reference internal\" href=\"../spray-can/http-client/#http-client-apis\"><em>HTTP Client APIs</em></a>. It doesn&#8217;t yet provide all the features that we&#8217;d like to include\neventually, but it should already be of some utility for many applications.</p>\n<p>Currently it allows you to wrap any one of the three <em>spray-can</em> client-side API levels with a pipelining logic,\nwhich provides for:</p>\n<ul class=\"simple\">\n<li>Convenient request building</li>\n<li>Authentication</li>\n<li>Compression / Decompression</li>\n<li>Marshalling / Unmarshalling from and to your custom types</li>\n</ul>\n<p>Currently, HTTP streaming (i.e. chunked transfer encoding) is not yet supported on the <em>spray-client</em> level (even though\nthe underlying <em>spray-can</em> <a class=\"reference internal\" href=\"../spray-can/http-client/#http-client-apis\"><em>HTTP Client APIs</em></a> do support it (the host- and request-level APIs only for responses)),\ni.e. you cannot send chunked requests and the <tt class=\"docutils literal\"><span class=\"pre\">response-chunk-aggregation-limit</span></tt> config setting for the underlying\ntransport must be non-zero).</p>\n<div class=\"section\" id=\"dependencies\">\n<h2>Dependencies</h2>\n<p>Apart from the Scala library (see <a class=\"reference internal\" href=\"../../project-info/current-versions/#current-versions\"><em>Current Versions</em></a> chapter) <em>spray-client</em> depends on</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../spray-can/#spray-can\"><em>spray-can</em></a></li>\n<li><a class=\"reference internal\" href=\"../spray-http/#spray-http\"><em>spray-http</em></a></li>\n<li><a class=\"reference internal\" href=\"../spray-httpx/#spray-httpx\"><em>spray-httpx</em></a></li>\n<li><a class=\"reference internal\" href=\"../spray-util/#spray-util\"><em>spray-util</em></a></li>\n<li>akka-actor 2.2.x (with &#8216;provided&#8217; scope, i.e. you need to pull it in yourself)</li>\n</ul>\n</div>\n<div class=\"section\" id=\"installation\">\n<h2>Installation</h2>\n<p>The <a class=\"reference internal\" href=\"../../project-info/maven-repository/#maven-repo\"><em>Maven Repository</em></a> chapter contains all the info about how to pull <em>spray-client</em> into your classpath.</p>\n</div>\n<div class=\"section\" id=\"usage\">\n<h2>Usage</h2>\n<p>The simplest of all use cases is this:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.client.pipelining._</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n<span class=\"k\">import</span> <span class=\"nn\">system.dispatcher</span> <span class=\"c1\">// execution context for futures</span>\n\n<span class=\"k\">val</span> <span class=\"n\">pipeline</span><span class=\"k\">:</span> <span class=\"kt\">HttpRequest</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">sendReceive</span>\n\n<span class=\"k\">val</span> <span class=\"n\">response</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">(</span><span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;http://spray.io/&quot;</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>The central element of a <em>spray-client</em> pipeline is <tt class=\"docutils literal\"><span class=\"pre\">sendReceive</span></tt>, which produces a function\n<tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">Future[HttpResponse]</span></tt> (this function type is also aliased to <tt class=\"docutils literal\"><span class=\"pre\">SendReceive</span></tt>). When called without\nparameters <tt class=\"docutils literal\"><span class=\"pre\">sendReceive</span></tt> will automatically use the <tt class=\"docutils literal\"><span class=\"pre\">IO(Http)</span></tt> extension of an implicitly available <tt class=\"docutils literal\"><span class=\"pre\">ActorSystem</span></tt>\nto access the <em>spray-can</em> <a class=\"reference internal\" href=\"../spray-can/http-client/request-level/#requestlevelapi\"><em>Request-level API</em></a>. All requests must therefore either carry an absolute URI or an\nexplicit <tt class=\"docutils literal\"><span class=\"pre\">Host</span></tt> header.</p>\n<p>In order to wrap pipelining around <em>spray-can</em>&#8216;s <a class=\"reference internal\" href=\"../spray-can/http-client/host-level/#hostlevelapi\"><em>Host-level API</em></a> you need to tell <tt class=\"docutils literal\"><span class=\"pre\">sendReceive</span></tt> which\nhost connector to use:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">akka.io.IO</span>\n<span class=\"k\">import</span> <span class=\"nn\">akka.pattern.ask</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.can.Http</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.client.pipelining._</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n<span class=\"k\">import</span> <span class=\"nn\">system.dispatcher</span> <span class=\"c1\">// execution context for futures</span>\n\n<span class=\"k\">val</span> <span class=\"n\">pipeline</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">SendReceive</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span>\n    <span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"nc\">HostConnectorInfo</span><span class=\"o\">(</span><span class=\"n\">connector</span><span class=\"o\">,</span> <span class=\"k\">_</span><span class=\"o\">)</span> <span class=\"k\">&lt;-</span>\n      <span class=\"nc\">IO</span><span class=\"o\">(</span><span class=\"nc\">Http</span><span class=\"o\">)</span> <span class=\"o\">?</span> <span class=\"nc\">Http</span><span class=\"o\">.</span><span class=\"nc\">HostConnectorSetup</span><span class=\"o\">(</span><span class=\"s\">&quot;www.spray.io&quot;</span><span class=\"o\">,</span> <span class=\"n\">port</span> <span class=\"k\">=</span> <span class=\"mi\">80</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span> <span class=\"k\">yield</span> <span class=\"n\">sendReceive</span><span class=\"o\">(</span><span class=\"n\">connector</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">request</span> <span class=\"k\">=</span> <span class=\"nc\">Get</span><span class=\"o\">(</span><span class=\"s\">&quot;/&quot;</span><span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">response</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">HttpResponse</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">flatMap</span><span class=\"o\">(</span><span class=\"k\">_</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">))</span>\n</pre></div>\n</div>\n<p>You can then fire requests with relative URIs and without <tt class=\"docutils literal\"><span class=\"pre\">Host</span></tt> header into the pipeline.</p>\n<p>A pipeline of type <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span> <span class=\"pre\">=&gt;</span> <span class=\"pre\">Future[HttpResponse]</span></tt> is nice start but leaves the creation of requests and\ninterpretation of responses completely to you. Many times you actually want to send and/or receive custom objects that\nneed to be serialized to HTTP requests or deserialized from HTTP responses.\nCheck out this snippet for an example of what <em>spray-client</em> pipelining can do for you in that regard:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nn\">spray.http._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.json.DefaultJsonProtocol</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.httpx.encoding.</span><span class=\"o\">{</span><span class=\"nc\">Gzip</span><span class=\"o\">,</span> <span class=\"nc\">Deflate</span><span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.httpx.SprayJsonSupport._</span>\n<span class=\"k\">import</span> <span class=\"nn\">spray.client.pipelining._</span>\n\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">Order</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n<span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">OrderConfirmation</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n<span class=\"k\">object</span> <span class=\"nc\">MyJsonProtocol</span> <span class=\"k\">extends</span> <span class=\"nc\">DefaultJsonProtocol</span> <span class=\"o\">{</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">orderFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonFormat1</span><span class=\"o\">(</span><span class=\"nc\">Order</span><span class=\"o\">)</span>\n  <span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">orderConfirmationFormat</span> <span class=\"k\">=</span> <span class=\"n\">jsonFormat1</span><span class=\"o\">(</span><span class=\"nc\">OrderConfirmation</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n<span class=\"k\">import</span> <span class=\"nn\">MyJsonProtocol._</span>\n\n<span class=\"k\">implicit</span> <span class=\"k\">val</span> <span class=\"n\">system</span> <span class=\"k\">=</span> <span class=\"nc\">ActorSystem</span><span class=\"o\">()</span>\n<span class=\"k\">import</span> <span class=\"nn\">system.dispatcher</span> <span class=\"c1\">// execution context for futures</span>\n\n<span class=\"k\">val</span> <span class=\"n\">pipeline</span><span class=\"k\">:</span> <span class=\"kt\">HttpRequest</span> <span class=\"o\">=&gt;</span> <span class=\"nc\">Future</span><span class=\"o\">[</span><span class=\"kt\">OrderConfirmation</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"o\">(</span>\n  <span class=\"n\">addHeader</span><span class=\"o\">(</span><span class=\"s\">&quot;X-My-Special-Header&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;fancy-value&quot;</span><span class=\"o\">)</span>\n  <span class=\"o\">~&gt;</span> <span class=\"n\">addCredentials</span><span class=\"o\">(</span><span class=\"nc\">BasicHttpCredentials</span><span class=\"o\">(</span><span class=\"s\">&quot;bob&quot;</span><span class=\"o\">,</span> <span class=\"s\">&quot;secret&quot;</span><span class=\"o\">))</span>\n  <span class=\"o\">~&gt;</span> <span class=\"n\">encode</span><span class=\"o\">(</span><span class=\"nc\">Gzip</span><span class=\"o\">)</span>\n  <span class=\"o\">~&gt;</span> <span class=\"n\">sendReceive</span>\n  <span class=\"o\">~&gt;</span> <span class=\"n\">decode</span><span class=\"o\">(</span><span class=\"nc\">Deflate</span><span class=\"o\">)</span>\n  <span class=\"o\">~&gt;</span> <span class=\"n\">unmarshal</span><span class=\"o\">[</span><span class=\"kt\">OrderConfirmation</span><span class=\"o\">]</span>\n<span class=\"o\">)</span>\n<span class=\"k\">val</span> <span class=\"n\">response</span><span class=\"k\">:</span> <span class=\"kt\">Future</span><span class=\"o\">[</span><span class=\"kt\">OrderConfirmation</span><span class=\"o\">]</span> <span class=\"k\">=</span>\n  <span class=\"n\">pipeline</span><span class=\"o\">(</span><span class=\"nc\">Post</span><span class=\"o\">(</span><span class=\"s\">&quot;http://example.com/orders&quot;</span><span class=\"o\">,</span> <span class=\"nc\">Order</span><span class=\"o\">(</span><span class=\"mi\">42</span><span class=\"o\">)))</span>\n</pre></div>\n</div>\n<p>This defines a more complex pipeline that takes an <tt class=\"docutils literal\"><span class=\"pre\">HttpRequest</span></tt>, adds headers and compresses its entity before\ndispatching it to the target server (the <tt class=\"docutils literal\"><span class=\"pre\">sendReceive</span></tt> element of the pipeline). The response coming back is then\ndecompressed and its entity unmarshalled.</p>\n<p>When you <tt class=\"docutils literal\"><span class=\"pre\">import</span> <span class=\"pre\">spray.client.pipelining._</span></tt> you not only get easy access to <tt class=\"docutils literal\"><span class=\"pre\">sendReceive</span></tt> but also all elements of\nthe <a class=\"reference internal\" href=\"../spray-httpx/#spray-httpx\"><em>spray-httpx</em></a> <a class=\"reference internal\" href=\"../spray-httpx/request-building/#requestbuilding\"><em>Request Building</em></a> and <a class=\"reference internal\" href=\"../spray-httpx/response-transformation/#responsetransformation\"><em>Response Transformation</em></a> traits. Therefore you can easily create\nrequests via something like <tt class=\"docutils literal\"><span class=\"pre\">Post(&quot;/orders&quot;,</span> <span class=\"pre\">Order(42))</span></tt>, which is not only shorter but also provides for\nautomatic marshalling of custom types.</p>\n</div>\n<div class=\"section\" id=\"example\">\n<h2>Example</h2>\n<p>The <a class=\"reference external\" href=\"https://github.com/spray/spray/tree/release/1.2/examples/spray-client\">/examples/spray-client/</a> directory of the <em>spray</em> repository contains an example project for <em>spray-client</em>.</p>\n<div class=\"section\" id=\"simple-spray-client\">\n<h3>simple-spray-client</h3>\n<p>This example shows off how to use <em>spray-client</em> by querying Google&#8217;s Elevation API to retrieve the elevation of\nMt. Everest.</p>\n<p>Follow these steps to run it on your machine:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Clone the <em>spray</em> repository:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"o\">://</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">spray</span><span class=\"o\">/</span><span class=\"n\">spray</span><span class=\"o\">.</span><span class=\"n\">git</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Change into the base directory:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">cd</span> <span class=\"n\">spray</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Run SBT:</p>\n<div class=\"highlight-scala\"><div class=\"highlight\"><pre><span class=\"n\">sbt</span> <span class=\"s\">&quot;project simple-spray-client&quot;</span> <span class=\"n\">run</span>\n</pre></div>\n</div>\n<p>(If this doesn&#8217;t work for you your SBT runner cannot deal with grouped arguments. In this case you&#8217;ll have to\nrun the commands <tt class=\"docutils literal\"><span class=\"pre\">project</span> <span class=\"pre\">simple-spray-client</span></tt> and <tt class=\"docutils literal\"><span class=\"pre\">run</span></tt> sequentially &#8220;inside&#8221; of SBT.)</p>\n</li>\n</ol>\n</div>\n</div>\n</div>\n", "display_toc": true, "title": "spray-client", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-client/index", "next": {"link": "../spray-http/", "title": "spray-http"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-http/index", "spray-http", "N", "next"], ["documentation/spray-can/examples", "Examples", "P", "previous"]], "meta": {}, "parents": [{"link": "../", "title": "Documentation"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">spray-client</a><ul>\n<li><a class=\"reference internal\" href=\"#dependencies\">Dependencies</a></li>\n<li><a class=\"reference internal\" href=\"#installation\">Installation</a></li>\n<li><a class=\"reference internal\" href=\"#usage\">Usage</a></li>\n<li><a class=\"reference internal\" href=\"#example\">Example</a><ul>\n<li><a class=\"reference internal\" href=\"#simple-spray-client\">simple-spray-client</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "prev": {"link": "../spray-can/examples/", "title": "Examples"}, "metatags": ""}