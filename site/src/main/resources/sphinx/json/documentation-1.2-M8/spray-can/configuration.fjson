{"body": "<div class=\"section\" id=\"configuration\">\n<span id=\"spray-can-configuration\"></span><h1>Configuration</h1>\n<p>Just like Akka <em>spray-can</em> relies on the <a class=\"reference external\" href=\"https://github.com/typesafehub/config\">typesafe config</a> library for configuration. As such its JAR contains a\n<tt class=\"docutils literal\"><span class=\"pre\">reference.conf</span></tt> file holding the default values of all configuration settings. In your application you typically\nprovide an <tt class=\"docutils literal\"><span class=\"pre\">application.conf</span></tt> in which you override Akka and/or <em>spray</em> settings according to your needs.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Since <em>spray</em> uses the same configuration technique as Akka you might want to check out the\n<a class=\"reference external\" href=\"http://doc.akka.io/docs/akka/2.1.4/general/configuration.html\">Akka Documentation on Configuration</a>.</p>\n</div>\n<p>This is the <tt class=\"docutils literal\"><span class=\"pre\">reference.conf</span></tt> of the <em>spray-can</em> module:</p>\n<div class=\"highlight-bash\"><div class=\"highlight\"><pre><span class=\"c\">###################################</span>\n<span class=\"c\"># spray-can Reference Config File #</span>\n<span class=\"c\">###################################</span>\n\n<span class=\"c\"># This is the reference config file that contains all the default settings.</span>\n<span class=\"c\"># Make your edits/overrides in your application.conf.</span>\n\nspray.can <span class=\"o\">{</span>\n\n  server <span class=\"o\">{</span>\n    <span class=\"c\"># The value of the `Server` header to produce.</span>\n    <span class=\"c\"># Set to the empty string to disable rendering of the server header.</span>\n    server-header <span class=\"o\">=</span> spray-can/<span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.version</span><span class=\"k\">}</span>\n\n    <span class=\"c\"># Enables/disables SSL encryption.</span>\n    <span class=\"c\"># If enabled the server uses the implicit `ServerSSLEngineProvider` member</span>\n    <span class=\"c\"># of the `Bind` command to create `SSLEngine` instances for the underlying</span>\n    <span class=\"c\"># IO connection.</span>\n    ssl-encryption <span class=\"o\">=</span> off\n\n    <span class=\"c\"># The maximum number of requests that are accepted (and dispatched to</span>\n    <span class=\"c\"># the application) on one single connection before the first request</span>\n    <span class=\"c\"># has to be completed.</span>\n    <span class=\"c\"># Incoming requests that would cause the pipelining limit to be exceeded</span>\n    <span class=\"c\"># are not read from the connections socket so as to build up &quot;back-pressure&quot;</span>\n    <span class=\"c\"># to the client via TCP flow control.</span>\n    <span class=\"c\"># A setting of 1 disables HTTP pipelining, since only one request per</span>\n    <span class=\"c\"># connection can be &quot;open&quot; (i.e. being processed by the application) at any</span>\n    <span class=\"c\"># time. Set to higher values to enable HTTP pipelining.</span>\n    <span class=\"c\"># Set to &#39;disabled&#39; for completely disabling pipelining limits</span>\n    <span class=\"c\"># (not recommended on public-facing servers due to risk of DoS attacks).</span>\n    <span class=\"c\"># This value must be &gt; 0 and &lt;= 128.</span>\n    pipelining-limit <span class=\"o\">=</span> 8\n\n    <span class=\"c\"># The time after which an idle connection will be automatically closed.</span>\n    <span class=\"c\"># Set to `infinite` to completely disable idle connection timeouts.</span>\n    idle-timeout <span class=\"o\">=</span> 60 s\n\n    <span class=\"c\"># If a request hasn&#39;t been responded to after the time period set here</span>\n    <span class=\"c\"># a `spray.http.Timedout` message will be sent to the timeout handler.</span>\n    <span class=\"c\"># Set to `infinite` to completely disable request timeouts.</span>\n    request-timeout <span class=\"o\">=</span> 20 s\n\n    <span class=\"c\"># After a `Timedout` message has been sent to the timeout handler and the</span>\n    <span class=\"c\"># request still hasn&#39;t been completed after the time period set here</span>\n    <span class=\"c\"># the server will complete the request itself with an error response.</span>\n    <span class=\"c\"># Set to `infinite` to disable timeout timeouts.</span>\n    timeout-timeout <span class=\"o\">=</span> 2 s\n\n    <span class=\"c\"># The path of the actor to send `spray.http.Timedout` messages to.</span>\n    <span class=\"c\"># If empty all `Timedout` messages will go to the &quot;regular&quot; request</span>\n    <span class=\"c\"># handling actor.</span>\n    timeout-handler <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"c\"># The &quot;granularity&quot; of timeout checking for both idle connections timeouts</span>\n    <span class=\"c\"># as well as request timeouts, should rarely be needed to modify.</span>\n    <span class=\"c\"># If set to `infinite` request and connection timeout checking is disabled.</span>\n    reaping-cycle <span class=\"o\">=</span> 250 ms\n\n    <span class=\"c\"># Enables/disables support for statistics collection and querying.</span>\n    <span class=\"c\"># Even though stats keeping overhead is small,</span>\n    <span class=\"c\"># for maximum performance switch off when not needed.</span>\n    stats-support <span class=\"o\">=</span> on\n\n    <span class=\"c\"># Enables/disables the addition of a `Remote-Address` header</span>\n    <span class=\"c\"># holding the clients (remote) IP address.</span>\n    remote-address-header <span class=\"o\">=</span> off\n\n    <span class=\"c\"># Enables/disables automatic handling of HEAD requests.</span>\n    <span class=\"c\"># If this setting is enabled the server dispatches HEAD requests as GET</span>\n    <span class=\"c\"># requests to the application and automatically strips off all message</span>\n    <span class=\"c\"># bodies from outgoing responses.</span>\n    <span class=\"c\"># Note that, even when this setting is off the server will never send</span>\n    <span class=\"c\"># out message bodies on responses to HEAD requests.</span>\n    transparent-head-requests <span class=\"o\">=</span> on\n\n    <span class=\"c\"># Enables/disables an alternative response streaming mode that doesn&#39;t</span>\n    <span class=\"c\"># use `Transfer-Encoding: chunked` but rather renders the individual</span>\n    <span class=\"c\"># MessageChunks coming in from the application as parts of the original</span>\n    <span class=\"c\"># response entity.</span>\n    <span class=\"c\"># Enabling this mode causes all connections to be closed after a streaming</span>\n    <span class=\"c\"># response has been finished since there is no other way to signal the</span>\n    <span class=\"c\"># response end to the client.</span>\n    <span class=\"c\"># Note that chunkless-streaming is implicitly enabled when response</span>\n    <span class=\"c\"># streaming to HTTP/1.0 clients (since they don&#39;t support</span>\n    <span class=\"c\"># `Transfer-Encoding: chunked`)</span>\n    chunkless-streaming <span class=\"o\">=</span> off\n\n    <span class=\"c\"># Enables/disables the returning of more detailed error messages to</span>\n    <span class=\"c\"># the client in the error response.</span>\n    <span class=\"c\"># Should be disabled for browser-facing APIs due to the risk of XSS attacks</span>\n    <span class=\"c\"># and (probably) enabled for internal or non-browser APIs.</span>\n    <span class=\"c\"># Note that spray will always produce log messages containing the full</span>\n    <span class=\"c\"># error details.</span>\n    verbose-error-messages <span class=\"o\">=</span> off\n\n    <span class=\"c\"># If this setting is non-zero the HTTP server automatically aggregates</span>\n    <span class=\"c\"># incoming request chunks into full HttpRequests before dispatching them to</span>\n    <span class=\"c\"># the application. If the size of the aggregated requests surpasses the</span>\n    <span class=\"c\"># specified limit the server responds with a `413 Request Entity Too Large`</span>\n    <span class=\"c\"># error response before closing the connection.</span>\n    <span class=\"c\"># Set to zero to disable automatic request chunk aggregation and have</span>\n    <span class=\"c\"># ChunkedRequestStart, MessageChunk and ChunkedMessageEnd messages be</span>\n    <span class=\"c\"># dispatched to the handler.</span>\n    request-chunk-aggregation-limit <span class=\"o\">=</span> 1m\n\n    <span class=\"c\"># The initial size if the buffer to render the response in.</span>\n    <span class=\"c\"># Can be used for fine-tuning response rendering performance but probably</span>\n    <span class=\"c\"># doesn&#39;t have to be fiddled with in most applications.</span>\n    response-size-hint <span class=\"o\">=</span> 1k\n\n    <span class=\"c\"># The time period within which the TCP binding process must be completed.</span>\n    <span class=\"c\"># Set to `infinite` to disable.</span>\n    <span class=\"nb\">bind</span>-timeout <span class=\"o\">=</span> 1s\n\n    <span class=\"c\"># The time period within which the TCP unbinding process must be completed.</span>\n    <span class=\"c\"># Set to `infinite` to disable.</span>\n    unbind-timeout <span class=\"o\">=</span> 1s\n\n    <span class=\"c\"># The time period within which a connection handler must have been</span>\n    <span class=\"c\"># registered after the bind handler has received a `Connected` event.</span>\n    <span class=\"c\"># Set to `infinite` to disable.</span>\n    registration-timeout <span class=\"o\">=</span> 1s\n\n    <span class=\"c\"># Modify to tweak parsing settings on the server-side only.</span>\n    <span class=\"nv\">parsing</span> <span class=\"o\">=</span> <span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.can.parsing</span><span class=\"k\">}</span>\n  <span class=\"o\">}</span>\n\n  client <span class=\"o\">{</span>\n    <span class=\"c\"># The value of the `User-Agent` header to produce.</span>\n    <span class=\"c\"># Set to the empty string to disable automatic rendering of the</span>\n    <span class=\"c\"># `User-Agent` header.</span>\n    user-agent-header <span class=\"o\">=</span> spray-can/<span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.version</span><span class=\"k\">}</span>\n\n    <span class=\"c\"># Enables/disables SSL encryption</span>\n    <span class=\"c\"># If enabled the client uses the implicit `ClientSSLEngineProvider` member</span>\n    <span class=\"c\"># of the Connect command to create `SSLEngine` instances for the underlying</span>\n    <span class=\"c\"># IO connection.</span>\n    ssl-encryption <span class=\"o\">=</span> off\n\n    <span class=\"c\"># The time after which an idle connection will be automatically closed.</span>\n    <span class=\"c\"># Set to `infinite` to completely disable idle timeouts.</span>\n    idle-timeout <span class=\"o\">=</span> 60 s\n\n    <span class=\"c\"># If a request hasn&#39;t been responded to after the time period set here the</span>\n    <span class=\"c\"># connection will be closed and the application will receive a respective</span>\n    <span class=\"c\"># `Closed` message.</span>\n    <span class=\"c\"># Set to `infinite` to completely disable request timeouts.</span>\n    request-timeout <span class=\"o\">=</span> 20 s\n\n    <span class=\"c\"># the &quot;granularity&quot; of timeout checking for both idle connections timeouts</span>\n    <span class=\"c\"># as well as request timeouts, should rarely be needed to modify.</span>\n    <span class=\"c\"># If set to `infinite` request and connection timeout checking is disabled.</span>\n    reaping-cycle <span class=\"o\">=</span> 250 ms\n\n    <span class=\"c\"># If this setting is non-zero the HTTP client connections automatically</span>\n    <span class=\"c\"># aggregate incoming response chunks into full HttpResponses before</span>\n    <span class=\"c\"># dispatching them to the application.</span>\n    <span class=\"c\"># If the size of the aggregated response surpasses the specified limit the</span>\n    <span class=\"c\"># HTTP client connection is closed and an error returned.</span>\n    <span class=\"c\"># Set to zero to disable automatic request chunk aggregation and have</span>\n    <span class=\"c\"># ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be</span>\n    <span class=\"c\"># dispatched to the application.</span>\n    response-chunk-aggregation-limit <span class=\"o\">=</span> 1m\n\n    <span class=\"c\"># The initial size if the buffer to render the request in.</span>\n    <span class=\"c\"># Can be used for fine-tuning request rendering performance but probably</span>\n    <span class=\"c\"># doesn&#39;t have to be fiddled with in most applications.</span>\n    request-size-hint <span class=\"o\">=</span> 512\n\n    <span class=\"c\"># The time period within which the TCP connecting process must be completed.</span>\n    <span class=\"c\"># Set to `infinite` to disable.</span>\n    connecting-timeout <span class=\"o\">=</span> 10s\n\n    <span class=\"c\"># Modify to tweak parsing settings on the client-side only.</span>\n    <span class=\"nv\">parsing</span> <span class=\"o\">=</span> <span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.can.parsing</span><span class=\"k\">}</span>\n  <span class=\"o\">}</span>\n\n  host-connector <span class=\"o\">{</span>\n    <span class=\"c\"># The maximum number of parallel connections that an `HttpHostConnector`</span>\n    <span class=\"c\"># is allowed to establish to a host. Must be greater than zero.</span>\n    max-connections <span class=\"o\">=</span> 4\n\n    <span class=\"c\"># The maximum number of times an `HttpHostConnector` attempts to repeat</span>\n    <span class=\"c\"># failed requests (if the request can be safely retried) before</span>\n    <span class=\"c\"># giving up and returning an error.</span>\n    max-retries <span class=\"o\">=</span> 5\n\n    <span class=\"c\"># If this setting is enabled, the `HttpHostConnector` pipelines requests</span>\n    <span class=\"c\"># across connections, otherwise only one single request can be &quot;open&quot;</span>\n    <span class=\"c\"># on a particular HTTP connection.</span>\n    <span class=\"nv\">pipelining</span> <span class=\"o\">=</span> off\n\n    <span class=\"c\"># The time after which an idle `HttpHostConnector` (without open</span>\n    <span class=\"c\"># connections) will automatically terminate itself.</span>\n    <span class=\"c\"># Set to `infinite` to completely disable idle timeouts.</span>\n    idle-timeout <span class=\"o\">=</span> 30 s\n\n    <span class=\"c\"># Modify to tweak client settings for this host-connector only.</span>\n    <span class=\"nv\">client</span> <span class=\"o\">=</span> <span class=\"k\">${</span><span class=\"nv\">spray</span><span class=\"p\">.can.client</span><span class=\"k\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c\"># The (default) configuration of the HTTP message parser for the server and</span>\n  <span class=\"c\"># the client.</span>\n  <span class=\"c\"># IMPORTANT: These settings (i.e. children of `spray.can.parsing`) can&#39;t be directly</span>\n  <span class=\"c\"># overridden in `application.conf` to change the parser settings for client and server</span>\n  <span class=\"c\"># altogether (see https://github.com/spray/spray/issues/346). Instead, override the</span>\n  <span class=\"c\"># concrete settings beneath `spray.can.server.parsing` and `spray.can.client.parsing`</span>\n  <span class=\"c\"># where these settings are copied to.</span>\n  parsing <span class=\"o\">{</span>\n    <span class=\"c\"># The limits for the various parts of the HTTP message parser.</span>\n    max-uri-length             <span class=\"o\">=</span> 2k\n    max-response-reason-length <span class=\"o\">=</span> 64\n    max-header-name-length     <span class=\"o\">=</span> 64\n    max-header-value-length    <span class=\"o\">=</span> 8k\n    max-header-count           <span class=\"o\">=</span> 64\n    max-content-length         <span class=\"o\">=</span> 8m\n    max-chunk-ext-length       <span class=\"o\">=</span> 256\n    max-chunk-size             <span class=\"o\">=</span> 1m\n\n    <span class=\"c\"># Sets the strictness mode for parsing request target URIs.</span>\n    <span class=\"c\"># The following values are defined:</span>\n    <span class=\"c\">#</span>\n    <span class=\"c\"># `strict`: RFC3986-compliant URIs are required,</span>\n    <span class=\"c\">#     a 400 response is triggered on violations</span>\n    <span class=\"c\">#</span>\n    <span class=\"c\"># `relaxed`: all visible 7-Bit ASCII chars are allowed</span>\n    <span class=\"c\">#</span>\n    <span class=\"c\"># `relaxed-with-raw-query`: like `relaxed` but additionally</span>\n    <span class=\"c\">#     the URI query is not parsed, but delivered as one raw string</span>\n    <span class=\"c\">#     as the `key` value of a single Query structure element.</span>\n    <span class=\"c\">#</span>\n    uri-parsing-mode <span class=\"o\">=</span> strict\n\n    <span class=\"c\"># Enables/disables the logging of warning messages in case an incoming</span>\n    <span class=\"c\"># message (request or response) contains an HTTP header which cannot be</span>\n    <span class=\"c\"># parsed into its high-level model class due to incompatible syntax.</span>\n    <span class=\"c\"># Note that, independently of this settings, spray will always accept</span>\n    <span class=\"c\"># messages with such headers as long as they adhere to the HTTP</span>\n    <span class=\"c\"># specification. If a header cannot be parsed into a high-level model</span>\n    <span class=\"c\"># instance it will be provided as a `RawHeader`.</span>\n    illegal-header-warnings <span class=\"o\">=</span> on\n\n    <span class=\"c\"># limits for the number of different values per header type that the</span>\n    <span class=\"c\"># header cache will hold</span>\n    header-cache <span class=\"o\">{</span>\n      <span class=\"nv\">default</span> <span class=\"o\">=</span> 12\n      Content-MD5 <span class=\"o\">=</span> 0\n      <span class=\"nv\">Date</span> <span class=\"o\">=</span> 0\n      If-Match <span class=\"o\">=</span> 0\n      If-Modified-Since <span class=\"o\">=</span> 0\n      If-None-Match <span class=\"o\">=</span> 0\n      If-Range <span class=\"o\">=</span> 0\n      If-Unmodified-Since <span class=\"o\">=</span> 0\n      User-Agent <span class=\"o\">=</span> 32\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"c\"># Fully qualified config path which holds the dispatcher configuration</span>\n  <span class=\"c\"># to be used for the HttpManager.</span>\n  manager-dispatcher <span class=\"o\">=</span> <span class=\"s2\">&quot;akka.actor.default-dispatcher&quot;</span>\n\n  <span class=\"c\"># Fully qualified config path which holds the dispatcher configuration</span>\n  <span class=\"c\"># to be used for the HttpClientSettingsGroup actors.</span>\n  settings-group-dispatcher <span class=\"o\">=</span> <span class=\"s2\">&quot;akka.actor.default-dispatcher&quot;</span>\n\n  <span class=\"c\"># Fully qualified config path which holds the dispatcher configuration</span>\n  <span class=\"c\"># to be used for the HttpHostConnector actors.</span>\n  host-connector-dispatcher <span class=\"o\">=</span> <span class=\"s2\">&quot;akka.actor.default-dispatcher&quot;</span>\n\n  <span class=\"c\"># Fully qualified config path which holds the dispatcher configuration</span>\n  <span class=\"c\"># to be used for HttpListener actors.</span>\n  listener-dispatcher <span class=\"o\">=</span> <span class=\"s2\">&quot;akka.actor.default-dispatcher&quot;</span>\n\n  <span class=\"c\"># Fully qualified config path which holds the dispatcher configuration</span>\n  <span class=\"c\"># to be used for HttpServerConnection and HttpClientConnection actors.</span>\n  connection-dispatcher <span class=\"o\">=</span> <span class=\"s2\">&quot;akka.actor.default-dispatcher&quot;</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n</div>\n", "display_toc": false, "title": "Configuration", "sourcename": "", "customsidebar": null, "current_page_name": "documentation/spray-can/configuration", "next": {"link": "../http-server/", "title": "HTTP Server"}, "rellinks": [["genindex", "General Index", "I", "index"], ["documentation/spray-can/http-server", "HTTP Server", "N", "next"], ["documentation/spray-can/installation", "Installation", "P", "previous"]], "meta": {}, "parents": [{"link": "../../", "title": "Documentation"}, {"link": "../", "title": "spray-can"}], "sidebars": null, "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Configuration</a></li>\n</ul>\n", "prev": {"link": "../installation/", "title": "Installation"}, "metatags": ""}